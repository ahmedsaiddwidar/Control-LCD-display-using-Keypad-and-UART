
challeng1-mc2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000029d2  00002a46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001e24  00000000  00000000  00002a50  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d9a  00000000  00000000  00004874  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000560e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000574e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000058be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007507  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000083f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000091a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000958d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009d5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ed       	ldi	r30, 0xD2	; 210
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 32 13 	call	0x2664	; 0x2664 <main>
      7a:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 87 14 	jmp	0x290e	; 0x290e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 87 14 	jmp	0x290e	; 0x290e <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 97 14 	jmp	0x292e	; 0x292e <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <LCD_sendCommand>:
#include<util/delay.h>
#include"common_macros.h"
#include<stdlib.h>

void LCD_sendCommand(uint8 command)
{
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	df 93       	push	r29
     b3c:	cf 93       	push	r28
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	c3 56       	subi	r28, 0x63	; 99
     b44:	d0 40       	sbci	r29, 0x00	; 0
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	fe 01       	movw	r30, r28
     b52:	ed 59       	subi	r30, 0x9D	; 157
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
     b62:	fe 01       	movw	r30, r28
     b64:	e1 5a       	subi	r30, 0xA1	; 161
     b66:	ff 4f       	sbci	r31, 0xFF	; 255
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	a0 e8       	ldi	r26, 0x80	; 128
     b6e:	bf e3       	ldi	r27, 0x3F	; 63
     b70:	80 83       	st	Z, r24
     b72:	91 83       	std	Z+1, r25	; 0x01
     b74:	a2 83       	std	Z+2, r26	; 0x02
     b76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b78:	8e 01       	movw	r16, r28
     b7a:	05 5a       	subi	r16, 0xA5	; 165
     b7c:	1f 4f       	sbci	r17, 0xFF	; 255
     b7e:	fe 01       	movw	r30, r28
     b80:	e1 5a       	subi	r30, 0xA1	; 161
     b82:	ff 4f       	sbci	r31, 0xFF	; 255
     b84:	60 81       	ld	r22, Z
     b86:	71 81       	ldd	r23, Z+1	; 0x01
     b88:	82 81       	ldd	r24, Z+2	; 0x02
     b8a:	93 81       	ldd	r25, Z+3	; 0x03
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	4a e7       	ldi	r20, 0x7A	; 122
     b92:	55 e4       	ldi	r21, 0x45	; 69
     b94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b98:	dc 01       	movw	r26, r24
     b9a:	cb 01       	movw	r24, r22
     b9c:	f8 01       	movw	r30, r16
     b9e:	80 83       	st	Z, r24
     ba0:	91 83       	std	Z+1, r25	; 0x01
     ba2:	a2 83       	std	Z+2, r26	; 0x02
     ba4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ba6:	fe 01       	movw	r30, r28
     ba8:	e5 5a       	subi	r30, 0xA5	; 165
     baa:	ff 4f       	sbci	r31, 0xFF	; 255
     bac:	60 81       	ld	r22, Z
     bae:	71 81       	ldd	r23, Z+1	; 0x01
     bb0:	82 81       	ldd	r24, Z+2	; 0x02
     bb2:	93 81       	ldd	r25, Z+3	; 0x03
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	40 e8       	ldi	r20, 0x80	; 128
     bba:	5f e3       	ldi	r21, 0x3F	; 63
     bbc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bc0:	88 23       	and	r24, r24
     bc2:	44 f4       	brge	.+16     	; 0xbd4 <LCD_sendCommand+0x9e>
		__ticks = 1;
     bc4:	fe 01       	movw	r30, r28
     bc6:	e7 5a       	subi	r30, 0xA7	; 167
     bc8:	ff 4f       	sbci	r31, 0xFF	; 255
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	91 83       	std	Z+1, r25	; 0x01
     bd0:	80 83       	st	Z, r24
     bd2:	64 c0       	rjmp	.+200    	; 0xc9c <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
     bd4:	fe 01       	movw	r30, r28
     bd6:	e5 5a       	subi	r30, 0xA5	; 165
     bd8:	ff 4f       	sbci	r31, 0xFF	; 255
     bda:	60 81       	ld	r22, Z
     bdc:	71 81       	ldd	r23, Z+1	; 0x01
     bde:	82 81       	ldd	r24, Z+2	; 0x02
     be0:	93 81       	ldd	r25, Z+3	; 0x03
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	3f ef       	ldi	r19, 0xFF	; 255
     be6:	4f e7       	ldi	r20, 0x7F	; 127
     be8:	57 e4       	ldi	r21, 0x47	; 71
     bea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bee:	18 16       	cp	r1, r24
     bf0:	0c f0       	brlt	.+2      	; 0xbf4 <LCD_sendCommand+0xbe>
     bf2:	43 c0       	rjmp	.+134    	; 0xc7a <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf4:	fe 01       	movw	r30, r28
     bf6:	e1 5a       	subi	r30, 0xA1	; 161
     bf8:	ff 4f       	sbci	r31, 0xFF	; 255
     bfa:	60 81       	ld	r22, Z
     bfc:	71 81       	ldd	r23, Z+1	; 0x01
     bfe:	82 81       	ldd	r24, Z+2	; 0x02
     c00:	93 81       	ldd	r25, Z+3	; 0x03
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 e2       	ldi	r20, 0x20	; 32
     c08:	51 e4       	ldi	r21, 0x41	; 65
     c0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c0e:	dc 01       	movw	r26, r24
     c10:	cb 01       	movw	r24, r22
     c12:	8e 01       	movw	r16, r28
     c14:	07 5a       	subi	r16, 0xA7	; 167
     c16:	1f 4f       	sbci	r17, 0xFF	; 255
     c18:	bc 01       	movw	r22, r24
     c1a:	cd 01       	movw	r24, r26
     c1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c20:	dc 01       	movw	r26, r24
     c22:	cb 01       	movw	r24, r22
     c24:	f8 01       	movw	r30, r16
     c26:	91 83       	std	Z+1, r25	; 0x01
     c28:	80 83       	st	Z, r24
     c2a:	1f c0       	rjmp	.+62     	; 0xc6a <LCD_sendCommand+0x134>
     c2c:	fe 01       	movw	r30, r28
     c2e:	e9 5a       	subi	r30, 0xA9	; 169
     c30:	ff 4f       	sbci	r31, 0xFF	; 255
     c32:	80 e9       	ldi	r24, 0x90	; 144
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	91 83       	std	Z+1, r25	; 0x01
     c38:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c3a:	fe 01       	movw	r30, r28
     c3c:	e9 5a       	subi	r30, 0xA9	; 169
     c3e:	ff 4f       	sbci	r31, 0xFF	; 255
     c40:	80 81       	ld	r24, Z
     c42:	91 81       	ldd	r25, Z+1	; 0x01
     c44:	01 97       	sbiw	r24, 0x01	; 1
     c46:	f1 f7       	brne	.-4      	; 0xc44 <LCD_sendCommand+0x10e>
     c48:	fe 01       	movw	r30, r28
     c4a:	e9 5a       	subi	r30, 0xA9	; 169
     c4c:	ff 4f       	sbci	r31, 0xFF	; 255
     c4e:	91 83       	std	Z+1, r25	; 0x01
     c50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c52:	de 01       	movw	r26, r28
     c54:	a7 5a       	subi	r26, 0xA7	; 167
     c56:	bf 4f       	sbci	r27, 0xFF	; 255
     c58:	fe 01       	movw	r30, r28
     c5a:	e7 5a       	subi	r30, 0xA7	; 167
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	80 81       	ld	r24, Z
     c60:	91 81       	ldd	r25, Z+1	; 0x01
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	11 96       	adiw	r26, 0x01	; 1
     c66:	9c 93       	st	X, r25
     c68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c6a:	fe 01       	movw	r30, r28
     c6c:	e7 5a       	subi	r30, 0xA7	; 167
     c6e:	ff 4f       	sbci	r31, 0xFF	; 255
     c70:	80 81       	ld	r24, Z
     c72:	91 81       	ldd	r25, Z+1	; 0x01
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	d1 f6       	brne	.-76     	; 0xc2c <LCD_sendCommand+0xf6>
     c78:	27 c0       	rjmp	.+78     	; 0xcc8 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c7a:	8e 01       	movw	r16, r28
     c7c:	07 5a       	subi	r16, 0xA7	; 167
     c7e:	1f 4f       	sbci	r17, 0xFF	; 255
     c80:	fe 01       	movw	r30, r28
     c82:	e5 5a       	subi	r30, 0xA5	; 165
     c84:	ff 4f       	sbci	r31, 0xFF	; 255
     c86:	60 81       	ld	r22, Z
     c88:	71 81       	ldd	r23, Z+1	; 0x01
     c8a:	82 81       	ldd	r24, Z+2	; 0x02
     c8c:	93 81       	ldd	r25, Z+3	; 0x03
     c8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
     c96:	f8 01       	movw	r30, r16
     c98:	91 83       	std	Z+1, r25	; 0x01
     c9a:	80 83       	st	Z, r24
     c9c:	de 01       	movw	r26, r28
     c9e:	ab 5a       	subi	r26, 0xAB	; 171
     ca0:	bf 4f       	sbci	r27, 0xFF	; 255
     ca2:	fe 01       	movw	r30, r28
     ca4:	e7 5a       	subi	r30, 0xA7	; 167
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	80 81       	ld	r24, Z
     caa:	91 81       	ldd	r25, Z+1	; 0x01
     cac:	8d 93       	st	X+, r24
     cae:	9c 93       	st	X, r25
     cb0:	fe 01       	movw	r30, r28
     cb2:	eb 5a       	subi	r30, 0xAB	; 171
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	80 81       	ld	r24, Z
     cb8:	91 81       	ldd	r25, Z+1	; 0x01
     cba:	01 97       	sbiw	r24, 0x01	; 1
     cbc:	f1 f7       	brne	.-4      	; 0xcba <LCD_sendCommand+0x184>
     cbe:	fe 01       	movw	r30, r28
     cc0:	eb 5a       	subi	r30, 0xAB	; 171
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	91 83       	std	Z+1, r25	; 0x01
     cc6:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	62 e0       	ldi	r22, 0x02	; 2
     ccc:	41 e0       	ldi	r20, 0x01	; 1
     cce:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
     cd2:	fe 01       	movw	r30, r28
     cd4:	ef 5a       	subi	r30, 0xAF	; 175
     cd6:	ff 4f       	sbci	r31, 0xFF	; 255
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e8       	ldi	r26, 0x80	; 128
     cde:	bf e3       	ldi	r27, 0x3F	; 63
     ce0:	80 83       	st	Z, r24
     ce2:	91 83       	std	Z+1, r25	; 0x01
     ce4:	a2 83       	std	Z+2, r26	; 0x02
     ce6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce8:	8e 01       	movw	r16, r28
     cea:	03 5b       	subi	r16, 0xB3	; 179
     cec:	1f 4f       	sbci	r17, 0xFF	; 255
     cee:	fe 01       	movw	r30, r28
     cf0:	ef 5a       	subi	r30, 0xAF	; 175
     cf2:	ff 4f       	sbci	r31, 0xFF	; 255
     cf4:	60 81       	ld	r22, Z
     cf6:	71 81       	ldd	r23, Z+1	; 0x01
     cf8:	82 81       	ldd	r24, Z+2	; 0x02
     cfa:	93 81       	ldd	r25, Z+3	; 0x03
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	4a e7       	ldi	r20, 0x7A	; 122
     d02:	55 e4       	ldi	r21, 0x45	; 69
     d04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d08:	dc 01       	movw	r26, r24
     d0a:	cb 01       	movw	r24, r22
     d0c:	f8 01       	movw	r30, r16
     d0e:	80 83       	st	Z, r24
     d10:	91 83       	std	Z+1, r25	; 0x01
     d12:	a2 83       	std	Z+2, r26	; 0x02
     d14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d16:	fe 01       	movw	r30, r28
     d18:	e3 5b       	subi	r30, 0xB3	; 179
     d1a:	ff 4f       	sbci	r31, 0xFF	; 255
     d1c:	60 81       	ld	r22, Z
     d1e:	71 81       	ldd	r23, Z+1	; 0x01
     d20:	82 81       	ldd	r24, Z+2	; 0x02
     d22:	93 81       	ldd	r25, Z+3	; 0x03
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	40 e8       	ldi	r20, 0x80	; 128
     d2a:	5f e3       	ldi	r21, 0x3F	; 63
     d2c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d30:	88 23       	and	r24, r24
     d32:	44 f4       	brge	.+16     	; 0xd44 <LCD_sendCommand+0x20e>
		__ticks = 1;
     d34:	fe 01       	movw	r30, r28
     d36:	e5 5b       	subi	r30, 0xB5	; 181
     d38:	ff 4f       	sbci	r31, 0xFF	; 255
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	91 83       	std	Z+1, r25	; 0x01
     d40:	80 83       	st	Z, r24
     d42:	64 c0       	rjmp	.+200    	; 0xe0c <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
     d44:	fe 01       	movw	r30, r28
     d46:	e3 5b       	subi	r30, 0xB3	; 179
     d48:	ff 4f       	sbci	r31, 0xFF	; 255
     d4a:	60 81       	ld	r22, Z
     d4c:	71 81       	ldd	r23, Z+1	; 0x01
     d4e:	82 81       	ldd	r24, Z+2	; 0x02
     d50:	93 81       	ldd	r25, Z+3	; 0x03
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	3f ef       	ldi	r19, 0xFF	; 255
     d56:	4f e7       	ldi	r20, 0x7F	; 127
     d58:	57 e4       	ldi	r21, 0x47	; 71
     d5a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d5e:	18 16       	cp	r1, r24
     d60:	0c f0       	brlt	.+2      	; 0xd64 <LCD_sendCommand+0x22e>
     d62:	43 c0       	rjmp	.+134    	; 0xdea <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d64:	fe 01       	movw	r30, r28
     d66:	ef 5a       	subi	r30, 0xAF	; 175
     d68:	ff 4f       	sbci	r31, 0xFF	; 255
     d6a:	60 81       	ld	r22, Z
     d6c:	71 81       	ldd	r23, Z+1	; 0x01
     d6e:	82 81       	ldd	r24, Z+2	; 0x02
     d70:	93 81       	ldd	r25, Z+3	; 0x03
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e2       	ldi	r20, 0x20	; 32
     d78:	51 e4       	ldi	r21, 0x41	; 65
     d7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	8e 01       	movw	r16, r28
     d84:	05 5b       	subi	r16, 0xB5	; 181
     d86:	1f 4f       	sbci	r17, 0xFF	; 255
     d88:	bc 01       	movw	r22, r24
     d8a:	cd 01       	movw	r24, r26
     d8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	f8 01       	movw	r30, r16
     d96:	91 83       	std	Z+1, r25	; 0x01
     d98:	80 83       	st	Z, r24
     d9a:	1f c0       	rjmp	.+62     	; 0xdda <LCD_sendCommand+0x2a4>
     d9c:	fe 01       	movw	r30, r28
     d9e:	e7 5b       	subi	r30, 0xB7	; 183
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	80 e9       	ldi	r24, 0x90	; 144
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	91 83       	std	Z+1, r25	; 0x01
     da8:	80 83       	st	Z, r24
     daa:	fe 01       	movw	r30, r28
     dac:	e7 5b       	subi	r30, 0xB7	; 183
     dae:	ff 4f       	sbci	r31, 0xFF	; 255
     db0:	80 81       	ld	r24, Z
     db2:	91 81       	ldd	r25, Z+1	; 0x01
     db4:	01 97       	sbiw	r24, 0x01	; 1
     db6:	f1 f7       	brne	.-4      	; 0xdb4 <LCD_sendCommand+0x27e>
     db8:	fe 01       	movw	r30, r28
     dba:	e7 5b       	subi	r30, 0xB7	; 183
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	91 83       	std	Z+1, r25	; 0x01
     dc0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc2:	de 01       	movw	r26, r28
     dc4:	a5 5b       	subi	r26, 0xB5	; 181
     dc6:	bf 4f       	sbci	r27, 0xFF	; 255
     dc8:	fe 01       	movw	r30, r28
     dca:	e5 5b       	subi	r30, 0xB5	; 181
     dcc:	ff 4f       	sbci	r31, 0xFF	; 255
     dce:	80 81       	ld	r24, Z
     dd0:	91 81       	ldd	r25, Z+1	; 0x01
     dd2:	01 97       	sbiw	r24, 0x01	; 1
     dd4:	11 96       	adiw	r26, 0x01	; 1
     dd6:	9c 93       	st	X, r25
     dd8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dda:	fe 01       	movw	r30, r28
     ddc:	e5 5b       	subi	r30, 0xB5	; 181
     dde:	ff 4f       	sbci	r31, 0xFF	; 255
     de0:	80 81       	ld	r24, Z
     de2:	91 81       	ldd	r25, Z+1	; 0x01
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	d1 f6       	brne	.-76     	; 0xd9c <LCD_sendCommand+0x266>
     de8:	27 c0       	rjmp	.+78     	; 0xe38 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dea:	8e 01       	movw	r16, r28
     dec:	05 5b       	subi	r16, 0xB5	; 181
     dee:	1f 4f       	sbci	r17, 0xFF	; 255
     df0:	fe 01       	movw	r30, r28
     df2:	e3 5b       	subi	r30, 0xB3	; 179
     df4:	ff 4f       	sbci	r31, 0xFF	; 255
     df6:	60 81       	ld	r22, Z
     df8:	71 81       	ldd	r23, Z+1	; 0x01
     dfa:	82 81       	ldd	r24, Z+2	; 0x02
     dfc:	93 81       	ldd	r25, Z+3	; 0x03
     dfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	f8 01       	movw	r30, r16
     e08:	91 83       	std	Z+1, r25	; 0x01
     e0a:	80 83       	st	Z, r24
     e0c:	de 01       	movw	r26, r28
     e0e:	a9 5b       	subi	r26, 0xB9	; 185
     e10:	bf 4f       	sbci	r27, 0xFF	; 255
     e12:	fe 01       	movw	r30, r28
     e14:	e5 5b       	subi	r30, 0xB5	; 181
     e16:	ff 4f       	sbci	r31, 0xFF	; 255
     e18:	80 81       	ld	r24, Z
     e1a:	91 81       	ldd	r25, Z+1	; 0x01
     e1c:	8d 93       	st	X+, r24
     e1e:	9c 93       	st	X, r25
     e20:	fe 01       	movw	r30, r28
     e22:	e9 5b       	subi	r30, 0xB9	; 185
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	80 81       	ld	r24, Z
     e28:	91 81       	ldd	r25, Z+1	; 0x01
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <LCD_sendCommand+0x2f4>
     e2e:	fe 01       	movw	r30, r28
     e30:	e9 5b       	subi	r30, 0xB9	; 185
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	91 83       	std	Z+1, r25	; 0x01
     e36:	80 83       	st	Z, r24
	_delay_ms(1);

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
     e38:	fe 01       	movw	r30, r28
     e3a:	ed 59       	subi	r30, 0x9D	; 157
     e3c:	ff 4f       	sbci	r31, 0xFF	; 255
     e3e:	80 81       	ld	r24, Z
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	80 71       	andi	r24, 0x10	; 16
     e46:	90 70       	andi	r25, 0x00	; 0
     e48:	95 95       	asr	r25
     e4a:	87 95       	ror	r24
     e4c:	95 95       	asr	r25
     e4e:	87 95       	ror	r24
     e50:	95 95       	asr	r25
     e52:	87 95       	ror	r24
     e54:	95 95       	asr	r25
     e56:	87 95       	ror	r24
     e58:	98 2f       	mov	r25, r24
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	63 e0       	ldi	r22, 0x03	; 3
     e5e:	49 2f       	mov	r20, r25
     e60:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
     e64:	fe 01       	movw	r30, r28
     e66:	ed 59       	subi	r30, 0x9D	; 157
     e68:	ff 4f       	sbci	r31, 0xFF	; 255
     e6a:	80 81       	ld	r24, Z
     e6c:	88 2f       	mov	r24, r24
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	80 72       	andi	r24, 0x20	; 32
     e72:	90 70       	andi	r25, 0x00	; 0
     e74:	95 95       	asr	r25
     e76:	87 95       	ror	r24
     e78:	95 95       	asr	r25
     e7a:	87 95       	ror	r24
     e7c:	95 95       	asr	r25
     e7e:	87 95       	ror	r24
     e80:	95 95       	asr	r25
     e82:	87 95       	ror	r24
     e84:	95 95       	asr	r25
     e86:	87 95       	ror	r24
     e88:	98 2f       	mov	r25, r24
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	64 e0       	ldi	r22, 0x04	; 4
     e8e:	49 2f       	mov	r20, r25
     e90:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
     e94:	fe 01       	movw	r30, r28
     e96:	ed 59       	subi	r30, 0x9D	; 157
     e98:	ff 4f       	sbci	r31, 0xFF	; 255
     e9a:	80 81       	ld	r24, Z
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	80 74       	andi	r24, 0x40	; 64
     ea2:	90 70       	andi	r25, 0x00	; 0
     ea4:	08 2e       	mov	r0, r24
     ea6:	89 2f       	mov	r24, r25
     ea8:	00 0c       	add	r0, r0
     eaa:	88 1f       	adc	r24, r24
     eac:	99 0b       	sbc	r25, r25
     eae:	00 0c       	add	r0, r0
     eb0:	88 1f       	adc	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	98 2f       	mov	r25, r24
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	65 e0       	ldi	r22, 0x05	; 5
     eba:	49 2f       	mov	r20, r25
     ebc:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
     ec0:	fe 01       	movw	r30, r28
     ec2:	ed 59       	subi	r30, 0x9D	; 157
     ec4:	ff 4f       	sbci	r31, 0xFF	; 255
     ec6:	80 81       	ld	r24, Z
     ec8:	98 2f       	mov	r25, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	99 27       	eor	r25, r25
     ece:	99 1f       	adc	r25, r25
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	66 e0       	ldi	r22, 0x06	; 6
     ed4:	49 2f       	mov	r20, r25
     ed6:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
     eda:	fe 01       	movw	r30, r28
     edc:	ed 5b       	subi	r30, 0xBD	; 189
     ede:	ff 4f       	sbci	r31, 0xFF	; 255
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	a0 e8       	ldi	r26, 0x80	; 128
     ee6:	bf e3       	ldi	r27, 0x3F	; 63
     ee8:	80 83       	st	Z, r24
     eea:	91 83       	std	Z+1, r25	; 0x01
     eec:	a2 83       	std	Z+2, r26	; 0x02
     eee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef0:	8e 01       	movw	r16, r28
     ef2:	01 5c       	subi	r16, 0xC1	; 193
     ef4:	1f 4f       	sbci	r17, 0xFF	; 255
     ef6:	fe 01       	movw	r30, r28
     ef8:	ed 5b       	subi	r30, 0xBD	; 189
     efa:	ff 4f       	sbci	r31, 0xFF	; 255
     efc:	60 81       	ld	r22, Z
     efe:	71 81       	ldd	r23, Z+1	; 0x01
     f00:	82 81       	ldd	r24, Z+2	; 0x02
     f02:	93 81       	ldd	r25, Z+3	; 0x03
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	4a e7       	ldi	r20, 0x7A	; 122
     f0a:	55 e4       	ldi	r21, 0x45	; 69
     f0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	f8 01       	movw	r30, r16
     f16:	80 83       	st	Z, r24
     f18:	91 83       	std	Z+1, r25	; 0x01
     f1a:	a2 83       	std	Z+2, r26	; 0x02
     f1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f1e:	fe 01       	movw	r30, r28
     f20:	ff 96       	adiw	r30, 0x3f	; 63
     f22:	60 81       	ld	r22, Z
     f24:	71 81       	ldd	r23, Z+1	; 0x01
     f26:	82 81       	ldd	r24, Z+2	; 0x02
     f28:	93 81       	ldd	r25, Z+3	; 0x03
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	40 e8       	ldi	r20, 0x80	; 128
     f30:	5f e3       	ldi	r21, 0x3F	; 63
     f32:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f36:	88 23       	and	r24, r24
     f38:	2c f4       	brge	.+10     	; 0xf44 <LCD_sendCommand+0x40e>
		__ticks = 1;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	9e af       	std	Y+62, r25	; 0x3e
     f40:	8d af       	std	Y+61, r24	; 0x3d
     f42:	46 c0       	rjmp	.+140    	; 0xfd0 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
     f44:	fe 01       	movw	r30, r28
     f46:	ff 96       	adiw	r30, 0x3f	; 63
     f48:	60 81       	ld	r22, Z
     f4a:	71 81       	ldd	r23, Z+1	; 0x01
     f4c:	82 81       	ldd	r24, Z+2	; 0x02
     f4e:	93 81       	ldd	r25, Z+3	; 0x03
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	3f ef       	ldi	r19, 0xFF	; 255
     f54:	4f e7       	ldi	r20, 0x7F	; 127
     f56:	57 e4       	ldi	r21, 0x47	; 71
     f58:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f5c:	18 16       	cp	r1, r24
     f5e:	64 f5       	brge	.+88     	; 0xfb8 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f60:	fe 01       	movw	r30, r28
     f62:	ed 5b       	subi	r30, 0xBD	; 189
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	60 81       	ld	r22, Z
     f68:	71 81       	ldd	r23, Z+1	; 0x01
     f6a:	82 81       	ldd	r24, Z+2	; 0x02
     f6c:	93 81       	ldd	r25, Z+3	; 0x03
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	40 e2       	ldi	r20, 0x20	; 32
     f74:	51 e4       	ldi	r21, 0x41	; 65
     f76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	bc 01       	movw	r22, r24
     f80:	cd 01       	movw	r24, r26
     f82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	9e af       	std	Y+62, r25	; 0x3e
     f8c:	8d af       	std	Y+61, r24	; 0x3d
     f8e:	0f c0       	rjmp	.+30     	; 0xfae <LCD_sendCommand+0x478>
     f90:	80 e9       	ldi	r24, 0x90	; 144
     f92:	91 e0       	ldi	r25, 0x01	; 1
     f94:	9c af       	std	Y+60, r25	; 0x3c
     f96:	8b af       	std	Y+59, r24	; 0x3b
     f98:	8b ad       	ldd	r24, Y+59	; 0x3b
     f9a:	9c ad       	ldd	r25, Y+60	; 0x3c
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <LCD_sendCommand+0x466>
     fa0:	9c af       	std	Y+60, r25	; 0x3c
     fa2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa4:	8d ad       	ldd	r24, Y+61	; 0x3d
     fa6:	9e ad       	ldd	r25, Y+62	; 0x3e
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	9e af       	std	Y+62, r25	; 0x3e
     fac:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fae:	8d ad       	ldd	r24, Y+61	; 0x3d
     fb0:	9e ad       	ldd	r25, Y+62	; 0x3e
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	69 f7       	brne	.-38     	; 0xf90 <LCD_sendCommand+0x45a>
     fb6:	16 c0       	rjmp	.+44     	; 0xfe4 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb8:	fe 01       	movw	r30, r28
     fba:	ff 96       	adiw	r30, 0x3f	; 63
     fbc:	60 81       	ld	r22, Z
     fbe:	71 81       	ldd	r23, Z+1	; 0x01
     fc0:	82 81       	ldd	r24, Z+2	; 0x02
     fc2:	93 81       	ldd	r25, Z+3	; 0x03
     fc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	9e af       	std	Y+62, r25	; 0x3e
     fce:	8d af       	std	Y+61, r24	; 0x3d
     fd0:	8d ad       	ldd	r24, Y+61	; 0x3d
     fd2:	9e ad       	ldd	r25, Y+62	; 0x3e
     fd4:	9a af       	std	Y+58, r25	; 0x3a
     fd6:	89 af       	std	Y+57, r24	; 0x39
     fd8:	89 ad       	ldd	r24, Y+57	; 0x39
     fda:	9a ad       	ldd	r25, Y+58	; 0x3a
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	f1 f7       	brne	.-4      	; 0xfdc <LCD_sendCommand+0x4a6>
     fe0:	9a af       	std	Y+58, r25	; 0x3a
     fe2:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	62 e0       	ldi	r22, 0x02	; 2
     fe8:	40 e0       	ldi	r20, 0x00	; 0
     fea:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a0 e8       	ldi	r26, 0x80	; 128
     ff4:	bf e3       	ldi	r27, 0x3F	; 63
     ff6:	8d ab       	std	Y+53, r24	; 0x35
     ff8:	9e ab       	std	Y+54, r25	; 0x36
     ffa:	af ab       	std	Y+55, r26	; 0x37
     ffc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ffe:	6d a9       	ldd	r22, Y+53	; 0x35
    1000:	7e a9       	ldd	r23, Y+54	; 0x36
    1002:	8f a9       	ldd	r24, Y+55	; 0x37
    1004:	98 ad       	ldd	r25, Y+56	; 0x38
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	4a e7       	ldi	r20, 0x7A	; 122
    100c:	55 e4       	ldi	r21, 0x45	; 69
    100e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	89 ab       	std	Y+49, r24	; 0x31
    1018:	9a ab       	std	Y+50, r25	; 0x32
    101a:	ab ab       	std	Y+51, r26	; 0x33
    101c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    101e:	69 a9       	ldd	r22, Y+49	; 0x31
    1020:	7a a9       	ldd	r23, Y+50	; 0x32
    1022:	8b a9       	ldd	r24, Y+51	; 0x33
    1024:	9c a9       	ldd	r25, Y+52	; 0x34
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e8       	ldi	r20, 0x80	; 128
    102c:	5f e3       	ldi	r21, 0x3F	; 63
    102e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1032:	88 23       	and	r24, r24
    1034:	2c f4       	brge	.+10     	; 0x1040 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	98 ab       	std	Y+48, r25	; 0x30
    103c:	8f a7       	std	Y+47, r24	; 0x2f
    103e:	3f c0       	rjmp	.+126    	; 0x10be <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1040:	69 a9       	ldd	r22, Y+49	; 0x31
    1042:	7a a9       	ldd	r23, Y+50	; 0x32
    1044:	8b a9       	ldd	r24, Y+51	; 0x33
    1046:	9c a9       	ldd	r25, Y+52	; 0x34
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	3f ef       	ldi	r19, 0xFF	; 255
    104c:	4f e7       	ldi	r20, 0x7F	; 127
    104e:	57 e4       	ldi	r21, 0x47	; 71
    1050:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1054:	18 16       	cp	r1, r24
    1056:	4c f5       	brge	.+82     	; 0x10aa <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1058:	6d a9       	ldd	r22, Y+53	; 0x35
    105a:	7e a9       	ldd	r23, Y+54	; 0x36
    105c:	8f a9       	ldd	r24, Y+55	; 0x37
    105e:	98 ad       	ldd	r25, Y+56	; 0x38
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e2       	ldi	r20, 0x20	; 32
    1066:	51 e4       	ldi	r21, 0x41	; 65
    1068:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	bc 01       	movw	r22, r24
    1072:	cd 01       	movw	r24, r26
    1074:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	98 ab       	std	Y+48, r25	; 0x30
    107e:	8f a7       	std	Y+47, r24	; 0x2f
    1080:	0f c0       	rjmp	.+30     	; 0x10a0 <LCD_sendCommand+0x56a>
    1082:	80 e9       	ldi	r24, 0x90	; 144
    1084:	91 e0       	ldi	r25, 0x01	; 1
    1086:	9e a7       	std	Y+46, r25	; 0x2e
    1088:	8d a7       	std	Y+45, r24	; 0x2d
    108a:	8d a5       	ldd	r24, Y+45	; 0x2d
    108c:	9e a5       	ldd	r25, Y+46	; 0x2e
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	f1 f7       	brne	.-4      	; 0x108e <LCD_sendCommand+0x558>
    1092:	9e a7       	std	Y+46, r25	; 0x2e
    1094:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1096:	8f a5       	ldd	r24, Y+47	; 0x2f
    1098:	98 a9       	ldd	r25, Y+48	; 0x30
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	98 ab       	std	Y+48, r25	; 0x30
    109e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    10a2:	98 a9       	ldd	r25, Y+48	; 0x30
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	69 f7       	brne	.-38     	; 0x1082 <LCD_sendCommand+0x54c>
    10a8:	14 c0       	rjmp	.+40     	; 0x10d2 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10aa:	69 a9       	ldd	r22, Y+49	; 0x31
    10ac:	7a a9       	ldd	r23, Y+50	; 0x32
    10ae:	8b a9       	ldd	r24, Y+51	; 0x33
    10b0:	9c a9       	ldd	r25, Y+52	; 0x34
    10b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	98 ab       	std	Y+48, r25	; 0x30
    10bc:	8f a7       	std	Y+47, r24	; 0x2f
    10be:	8f a5       	ldd	r24, Y+47	; 0x2f
    10c0:	98 a9       	ldd	r25, Y+48	; 0x30
    10c2:	9c a7       	std	Y+44, r25	; 0x2c
    10c4:	8b a7       	std	Y+43, r24	; 0x2b
    10c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    10c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <LCD_sendCommand+0x594>
    10ce:	9c a7       	std	Y+44, r25	; 0x2c
    10d0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	62 e0       	ldi	r22, 0x02	; 2
    10d6:	41 e0       	ldi	r20, 0x01	; 1
    10d8:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	a0 e8       	ldi	r26, 0x80	; 128
    10e2:	bf e3       	ldi	r27, 0x3F	; 63
    10e4:	8f a3       	std	Y+39, r24	; 0x27
    10e6:	98 a7       	std	Y+40, r25	; 0x28
    10e8:	a9 a7       	std	Y+41, r26	; 0x29
    10ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ec:	6f a1       	ldd	r22, Y+39	; 0x27
    10ee:	78 a5       	ldd	r23, Y+40	; 0x28
    10f0:	89 a5       	ldd	r24, Y+41	; 0x29
    10f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	4a e7       	ldi	r20, 0x7A	; 122
    10fa:	55 e4       	ldi	r21, 0x45	; 69
    10fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	8b a3       	std	Y+35, r24	; 0x23
    1106:	9c a3       	std	Y+36, r25	; 0x24
    1108:	ad a3       	std	Y+37, r26	; 0x25
    110a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    110c:	6b a1       	ldd	r22, Y+35	; 0x23
    110e:	7c a1       	ldd	r23, Y+36	; 0x24
    1110:	8d a1       	ldd	r24, Y+37	; 0x25
    1112:	9e a1       	ldd	r25, Y+38	; 0x26
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e8       	ldi	r20, 0x80	; 128
    111a:	5f e3       	ldi	r21, 0x3F	; 63
    111c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1120:	88 23       	and	r24, r24
    1122:	2c f4       	brge	.+10     	; 0x112e <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	9a a3       	std	Y+34, r25	; 0x22
    112a:	89 a3       	std	Y+33, r24	; 0x21
    112c:	3f c0       	rjmp	.+126    	; 0x11ac <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    112e:	6b a1       	ldd	r22, Y+35	; 0x23
    1130:	7c a1       	ldd	r23, Y+36	; 0x24
    1132:	8d a1       	ldd	r24, Y+37	; 0x25
    1134:	9e a1       	ldd	r25, Y+38	; 0x26
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	3f ef       	ldi	r19, 0xFF	; 255
    113a:	4f e7       	ldi	r20, 0x7F	; 127
    113c:	57 e4       	ldi	r21, 0x47	; 71
    113e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1142:	18 16       	cp	r1, r24
    1144:	4c f5       	brge	.+82     	; 0x1198 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1146:	6f a1       	ldd	r22, Y+39	; 0x27
    1148:	78 a5       	ldd	r23, Y+40	; 0x28
    114a:	89 a5       	ldd	r24, Y+41	; 0x29
    114c:	9a a5       	ldd	r25, Y+42	; 0x2a
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e2       	ldi	r20, 0x20	; 32
    1154:	51 e4       	ldi	r21, 0x41	; 65
    1156:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	bc 01       	movw	r22, r24
    1160:	cd 01       	movw	r24, r26
    1162:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	9a a3       	std	Y+34, r25	; 0x22
    116c:	89 a3       	std	Y+33, r24	; 0x21
    116e:	0f c0       	rjmp	.+30     	; 0x118e <LCD_sendCommand+0x658>
    1170:	80 e9       	ldi	r24, 0x90	; 144
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	98 a3       	std	Y+32, r25	; 0x20
    1176:	8f 8f       	std	Y+31, r24	; 0x1f
    1178:	8f 8d       	ldd	r24, Y+31	; 0x1f
    117a:	98 a1       	ldd	r25, Y+32	; 0x20
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	f1 f7       	brne	.-4      	; 0x117c <LCD_sendCommand+0x646>
    1180:	98 a3       	std	Y+32, r25	; 0x20
    1182:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1184:	89 a1       	ldd	r24, Y+33	; 0x21
    1186:	9a a1       	ldd	r25, Y+34	; 0x22
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	9a a3       	std	Y+34, r25	; 0x22
    118c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118e:	89 a1       	ldd	r24, Y+33	; 0x21
    1190:	9a a1       	ldd	r25, Y+34	; 0x22
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	69 f7       	brne	.-38     	; 0x1170 <LCD_sendCommand+0x63a>
    1196:	14 c0       	rjmp	.+40     	; 0x11c0 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1198:	6b a1       	ldd	r22, Y+35	; 0x23
    119a:	7c a1       	ldd	r23, Y+36	; 0x24
    119c:	8d a1       	ldd	r24, Y+37	; 0x25
    119e:	9e a1       	ldd	r25, Y+38	; 0x26
    11a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	9a a3       	std	Y+34, r25	; 0x22
    11aa:	89 a3       	std	Y+33, r24	; 0x21
    11ac:	89 a1       	ldd	r24, Y+33	; 0x21
    11ae:	9a a1       	ldd	r25, Y+34	; 0x22
    11b0:	9e 8f       	std	Y+30, r25	; 0x1e
    11b2:	8d 8f       	std	Y+29, r24	; 0x1d
    11b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	f1 f7       	brne	.-4      	; 0x11b8 <LCD_sendCommand+0x682>
    11bc:	9e 8f       	std	Y+30, r25	; 0x1e
    11be:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    11c0:	fe 01       	movw	r30, r28
    11c2:	ed 59       	subi	r30, 0x9D	; 157
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	80 81       	ld	r24, Z
    11c8:	98 2f       	mov	r25, r24
    11ca:	91 70       	andi	r25, 0x01	; 1
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	63 e0       	ldi	r22, 0x03	; 3
    11d0:	49 2f       	mov	r20, r25
    11d2:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    11d6:	fe 01       	movw	r30, r28
    11d8:	ed 59       	subi	r30, 0x9D	; 157
    11da:	ff 4f       	sbci	r31, 0xFF	; 255
    11dc:	80 81       	ld	r24, Z
    11de:	88 2f       	mov	r24, r24
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	82 70       	andi	r24, 0x02	; 2
    11e4:	90 70       	andi	r25, 0x00	; 0
    11e6:	95 95       	asr	r25
    11e8:	87 95       	ror	r24
    11ea:	98 2f       	mov	r25, r24
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	64 e0       	ldi	r22, 0x04	; 4
    11f0:	49 2f       	mov	r20, r25
    11f2:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    11f6:	fe 01       	movw	r30, r28
    11f8:	ed 59       	subi	r30, 0x9D	; 157
    11fa:	ff 4f       	sbci	r31, 0xFF	; 255
    11fc:	80 81       	ld	r24, Z
    11fe:	88 2f       	mov	r24, r24
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	84 70       	andi	r24, 0x04	; 4
    1204:	90 70       	andi	r25, 0x00	; 0
    1206:	95 95       	asr	r25
    1208:	87 95       	ror	r24
    120a:	95 95       	asr	r25
    120c:	87 95       	ror	r24
    120e:	98 2f       	mov	r25, r24
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	65 e0       	ldi	r22, 0x05	; 5
    1214:	49 2f       	mov	r20, r25
    1216:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    121a:	fe 01       	movw	r30, r28
    121c:	ed 59       	subi	r30, 0x9D	; 157
    121e:	ff 4f       	sbci	r31, 0xFF	; 255
    1220:	80 81       	ld	r24, Z
    1222:	88 2f       	mov	r24, r24
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	88 70       	andi	r24, 0x08	; 8
    1228:	90 70       	andi	r25, 0x00	; 0
    122a:	95 95       	asr	r25
    122c:	87 95       	ror	r24
    122e:	95 95       	asr	r25
    1230:	87 95       	ror	r24
    1232:	95 95       	asr	r25
    1234:	87 95       	ror	r24
    1236:	98 2f       	mov	r25, r24
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	66 e0       	ldi	r22, 0x06	; 6
    123c:	49 2f       	mov	r20, r25
    123e:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	a0 e8       	ldi	r26, 0x80	; 128
    1248:	bf e3       	ldi	r27, 0x3F	; 63
    124a:	89 8f       	std	Y+25, r24	; 0x19
    124c:	9a 8f       	std	Y+26, r25	; 0x1a
    124e:	ab 8f       	std	Y+27, r26	; 0x1b
    1250:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1252:	69 8d       	ldd	r22, Y+25	; 0x19
    1254:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1256:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1258:	9c 8d       	ldd	r25, Y+28	; 0x1c
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	4a e7       	ldi	r20, 0x7A	; 122
    1260:	55 e4       	ldi	r21, 0x45	; 69
    1262:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	8d 8b       	std	Y+21, r24	; 0x15
    126c:	9e 8b       	std	Y+22, r25	; 0x16
    126e:	af 8b       	std	Y+23, r26	; 0x17
    1270:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1272:	6d 89       	ldd	r22, Y+21	; 0x15
    1274:	7e 89       	ldd	r23, Y+22	; 0x16
    1276:	8f 89       	ldd	r24, Y+23	; 0x17
    1278:	98 8d       	ldd	r25, Y+24	; 0x18
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e8       	ldi	r20, 0x80	; 128
    1280:	5f e3       	ldi	r21, 0x3F	; 63
    1282:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1286:	88 23       	and	r24, r24
    1288:	2c f4       	brge	.+10     	; 0x1294 <LCD_sendCommand+0x75e>
		__ticks = 1;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	9c 8b       	std	Y+20, r25	; 0x14
    1290:	8b 8b       	std	Y+19, r24	; 0x13
    1292:	3f c0       	rjmp	.+126    	; 0x1312 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1294:	6d 89       	ldd	r22, Y+21	; 0x15
    1296:	7e 89       	ldd	r23, Y+22	; 0x16
    1298:	8f 89       	ldd	r24, Y+23	; 0x17
    129a:	98 8d       	ldd	r25, Y+24	; 0x18
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	3f ef       	ldi	r19, 0xFF	; 255
    12a0:	4f e7       	ldi	r20, 0x7F	; 127
    12a2:	57 e4       	ldi	r21, 0x47	; 71
    12a4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12a8:	18 16       	cp	r1, r24
    12aa:	4c f5       	brge	.+82     	; 0x12fe <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ac:	69 8d       	ldd	r22, Y+25	; 0x19
    12ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	40 e2       	ldi	r20, 0x20	; 32
    12ba:	51 e4       	ldi	r21, 0x41	; 65
    12bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	bc 01       	movw	r22, r24
    12c6:	cd 01       	movw	r24, r26
    12c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	9c 8b       	std	Y+20, r25	; 0x14
    12d2:	8b 8b       	std	Y+19, r24	; 0x13
    12d4:	0f c0       	rjmp	.+30     	; 0x12f4 <LCD_sendCommand+0x7be>
    12d6:	80 e9       	ldi	r24, 0x90	; 144
    12d8:	91 e0       	ldi	r25, 0x01	; 1
    12da:	9a 8b       	std	Y+18, r25	; 0x12
    12dc:	89 8b       	std	Y+17, r24	; 0x11
    12de:	89 89       	ldd	r24, Y+17	; 0x11
    12e0:	9a 89       	ldd	r25, Y+18	; 0x12
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	f1 f7       	brne	.-4      	; 0x12e2 <LCD_sendCommand+0x7ac>
    12e6:	9a 8b       	std	Y+18, r25	; 0x12
    12e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ea:	8b 89       	ldd	r24, Y+19	; 0x13
    12ec:	9c 89       	ldd	r25, Y+20	; 0x14
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	9c 8b       	std	Y+20, r25	; 0x14
    12f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f4:	8b 89       	ldd	r24, Y+19	; 0x13
    12f6:	9c 89       	ldd	r25, Y+20	; 0x14
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	69 f7       	brne	.-38     	; 0x12d6 <LCD_sendCommand+0x7a0>
    12fc:	14 c0       	rjmp	.+40     	; 0x1326 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1300:	7e 89       	ldd	r23, Y+22	; 0x16
    1302:	8f 89       	ldd	r24, Y+23	; 0x17
    1304:	98 8d       	ldd	r25, Y+24	; 0x18
    1306:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	9c 8b       	std	Y+20, r25	; 0x14
    1310:	8b 8b       	std	Y+19, r24	; 0x13
    1312:	8b 89       	ldd	r24, Y+19	; 0x13
    1314:	9c 89       	ldd	r25, Y+20	; 0x14
    1316:	98 8b       	std	Y+16, r25	; 0x10
    1318:	8f 87       	std	Y+15, r24	; 0x0f
    131a:	8f 85       	ldd	r24, Y+15	; 0x0f
    131c:	98 89       	ldd	r25, Y+16	; 0x10
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	f1 f7       	brne	.-4      	; 0x131e <LCD_sendCommand+0x7e8>
    1322:	98 8b       	std	Y+16, r25	; 0x10
    1324:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	62 e0       	ldi	r22, 0x02	; 2
    132a:	40 e0       	ldi	r20, 0x00	; 0
    132c:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	a0 e8       	ldi	r26, 0x80	; 128
    1336:	bf e3       	ldi	r27, 0x3F	; 63
    1338:	8b 87       	std	Y+11, r24	; 0x0b
    133a:	9c 87       	std	Y+12, r25	; 0x0c
    133c:	ad 87       	std	Y+13, r26	; 0x0d
    133e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1340:	6b 85       	ldd	r22, Y+11	; 0x0b
    1342:	7c 85       	ldd	r23, Y+12	; 0x0c
    1344:	8d 85       	ldd	r24, Y+13	; 0x0d
    1346:	9e 85       	ldd	r25, Y+14	; 0x0e
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	4a e7       	ldi	r20, 0x7A	; 122
    134e:	55 e4       	ldi	r21, 0x45	; 69
    1350:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	8f 83       	std	Y+7, r24	; 0x07
    135a:	98 87       	std	Y+8, r25	; 0x08
    135c:	a9 87       	std	Y+9, r26	; 0x09
    135e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1360:	6f 81       	ldd	r22, Y+7	; 0x07
    1362:	78 85       	ldd	r23, Y+8	; 0x08
    1364:	89 85       	ldd	r24, Y+9	; 0x09
    1366:	9a 85       	ldd	r25, Y+10	; 0x0a
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e8       	ldi	r20, 0x80	; 128
    136e:	5f e3       	ldi	r21, 0x3F	; 63
    1370:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1374:	88 23       	and	r24, r24
    1376:	2c f4       	brge	.+10     	; 0x1382 <LCD_sendCommand+0x84c>
		__ticks = 1;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	9e 83       	std	Y+6, r25	; 0x06
    137e:	8d 83       	std	Y+5, r24	; 0x05
    1380:	3f c0       	rjmp	.+126    	; 0x1400 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    1382:	6f 81       	ldd	r22, Y+7	; 0x07
    1384:	78 85       	ldd	r23, Y+8	; 0x08
    1386:	89 85       	ldd	r24, Y+9	; 0x09
    1388:	9a 85       	ldd	r25, Y+10	; 0x0a
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	3f ef       	ldi	r19, 0xFF	; 255
    138e:	4f e7       	ldi	r20, 0x7F	; 127
    1390:	57 e4       	ldi	r21, 0x47	; 71
    1392:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1396:	18 16       	cp	r1, r24
    1398:	4c f5       	brge	.+82     	; 0x13ec <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    139a:	6b 85       	ldd	r22, Y+11	; 0x0b
    139c:	7c 85       	ldd	r23, Y+12	; 0x0c
    139e:	8d 85       	ldd	r24, Y+13	; 0x0d
    13a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e2       	ldi	r20, 0x20	; 32
    13a8:	51 e4       	ldi	r21, 0x41	; 65
    13aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	bc 01       	movw	r22, r24
    13b4:	cd 01       	movw	r24, r26
    13b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	9e 83       	std	Y+6, r25	; 0x06
    13c0:	8d 83       	std	Y+5, r24	; 0x05
    13c2:	0f c0       	rjmp	.+30     	; 0x13e2 <LCD_sendCommand+0x8ac>
    13c4:	80 e9       	ldi	r24, 0x90	; 144
    13c6:	91 e0       	ldi	r25, 0x01	; 1
    13c8:	9c 83       	std	Y+4, r25	; 0x04
    13ca:	8b 83       	std	Y+3, r24	; 0x03
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	9c 81       	ldd	r25, Y+4	; 0x04
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	f1 f7       	brne	.-4      	; 0x13d0 <LCD_sendCommand+0x89a>
    13d4:	9c 83       	std	Y+4, r25	; 0x04
    13d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d8:	8d 81       	ldd	r24, Y+5	; 0x05
    13da:	9e 81       	ldd	r25, Y+6	; 0x06
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	9e 83       	std	Y+6, r25	; 0x06
    13e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	9e 81       	ldd	r25, Y+6	; 0x06
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	69 f7       	brne	.-38     	; 0x13c4 <LCD_sendCommand+0x88e>
    13ea:	14 c0       	rjmp	.+40     	; 0x1414 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ec:	6f 81       	ldd	r22, Y+7	; 0x07
    13ee:	78 85       	ldd	r23, Y+8	; 0x08
    13f0:	89 85       	ldd	r24, Y+9	; 0x09
    13f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	9e 83       	std	Y+6, r25	; 0x06
    13fe:	8d 83       	std	Y+5, r24	; 0x05
    1400:	8d 81       	ldd	r24, Y+5	; 0x05
    1402:	9e 81       	ldd	r25, Y+6	; 0x06
    1404:	9a 83       	std	Y+2, r25	; 0x02
    1406:	89 83       	std	Y+1, r24	; 0x01
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	9a 81       	ldd	r25, Y+2	; 0x02
    140c:	01 97       	sbiw	r24, 0x01	; 1
    140e:	f1 f7       	brne	.-4      	; 0x140c <LCD_sendCommand+0x8d6>
    1410:	9a 83       	std	Y+2, r25	; 0x02
    1412:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command);
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
	_delay_ms(1);
#endif
}
    1414:	cd 59       	subi	r28, 0x9D	; 157
    1416:	df 4f       	sbci	r29, 0xFF	; 255
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	1f 91       	pop	r17
    1428:	0f 91       	pop	r16
    142a:	08 95       	ret

0000142c <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 character)
{
    142c:	0f 93       	push	r16
    142e:	1f 93       	push	r17
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	c3 56       	subi	r28, 0x63	; 99
    143a:	d0 40       	sbci	r29, 0x00	; 0
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61
    1446:	fe 01       	movw	r30, r28
    1448:	ed 59       	subi	r30, 0x9D	; 157
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	61 e0       	ldi	r22, 0x01	; 1
    1452:	41 e0       	ldi	r20, 0x01	; 1
    1454:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
    1458:	fe 01       	movw	r30, r28
    145a:	e1 5a       	subi	r30, 0xA1	; 161
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	a0 e8       	ldi	r26, 0x80	; 128
    1464:	bf e3       	ldi	r27, 0x3F	; 63
    1466:	80 83       	st	Z, r24
    1468:	91 83       	std	Z+1, r25	; 0x01
    146a:	a2 83       	std	Z+2, r26	; 0x02
    146c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    146e:	8e 01       	movw	r16, r28
    1470:	05 5a       	subi	r16, 0xA5	; 165
    1472:	1f 4f       	sbci	r17, 0xFF	; 255
    1474:	fe 01       	movw	r30, r28
    1476:	e1 5a       	subi	r30, 0xA1	; 161
    1478:	ff 4f       	sbci	r31, 0xFF	; 255
    147a:	60 81       	ld	r22, Z
    147c:	71 81       	ldd	r23, Z+1	; 0x01
    147e:	82 81       	ldd	r24, Z+2	; 0x02
    1480:	93 81       	ldd	r25, Z+3	; 0x03
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	4a e7       	ldi	r20, 0x7A	; 122
    1488:	55 e4       	ldi	r21, 0x45	; 69
    148a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	f8 01       	movw	r30, r16
    1494:	80 83       	st	Z, r24
    1496:	91 83       	std	Z+1, r25	; 0x01
    1498:	a2 83       	std	Z+2, r26	; 0x02
    149a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    149c:	fe 01       	movw	r30, r28
    149e:	e5 5a       	subi	r30, 0xA5	; 165
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	60 81       	ld	r22, Z
    14a4:	71 81       	ldd	r23, Z+1	; 0x01
    14a6:	82 81       	ldd	r24, Z+2	; 0x02
    14a8:	93 81       	ldd	r25, Z+3	; 0x03
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e8       	ldi	r20, 0x80	; 128
    14b0:	5f e3       	ldi	r21, 0x3F	; 63
    14b2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14b6:	88 23       	and	r24, r24
    14b8:	44 f4       	brge	.+16     	; 0x14ca <LCD_displayCharacter+0x9e>
		__ticks = 1;
    14ba:	fe 01       	movw	r30, r28
    14bc:	e7 5a       	subi	r30, 0xA7	; 167
    14be:	ff 4f       	sbci	r31, 0xFF	; 255
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	91 83       	std	Z+1, r25	; 0x01
    14c6:	80 83       	st	Z, r24
    14c8:	64 c0       	rjmp	.+200    	; 0x1592 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    14ca:	fe 01       	movw	r30, r28
    14cc:	e5 5a       	subi	r30, 0xA5	; 165
    14ce:	ff 4f       	sbci	r31, 0xFF	; 255
    14d0:	60 81       	ld	r22, Z
    14d2:	71 81       	ldd	r23, Z+1	; 0x01
    14d4:	82 81       	ldd	r24, Z+2	; 0x02
    14d6:	93 81       	ldd	r25, Z+3	; 0x03
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	3f ef       	ldi	r19, 0xFF	; 255
    14dc:	4f e7       	ldi	r20, 0x7F	; 127
    14de:	57 e4       	ldi	r21, 0x47	; 71
    14e0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14e4:	18 16       	cp	r1, r24
    14e6:	0c f0       	brlt	.+2      	; 0x14ea <LCD_displayCharacter+0xbe>
    14e8:	43 c0       	rjmp	.+134    	; 0x1570 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ea:	fe 01       	movw	r30, r28
    14ec:	e1 5a       	subi	r30, 0xA1	; 161
    14ee:	ff 4f       	sbci	r31, 0xFF	; 255
    14f0:	60 81       	ld	r22, Z
    14f2:	71 81       	ldd	r23, Z+1	; 0x01
    14f4:	82 81       	ldd	r24, Z+2	; 0x02
    14f6:	93 81       	ldd	r25, Z+3	; 0x03
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	40 e2       	ldi	r20, 0x20	; 32
    14fe:	51 e4       	ldi	r21, 0x41	; 65
    1500:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	8e 01       	movw	r16, r28
    150a:	07 5a       	subi	r16, 0xA7	; 167
    150c:	1f 4f       	sbci	r17, 0xFF	; 255
    150e:	bc 01       	movw	r22, r24
    1510:	cd 01       	movw	r24, r26
    1512:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	f8 01       	movw	r30, r16
    151c:	91 83       	std	Z+1, r25	; 0x01
    151e:	80 83       	st	Z, r24
    1520:	1f c0       	rjmp	.+62     	; 0x1560 <LCD_displayCharacter+0x134>
    1522:	fe 01       	movw	r30, r28
    1524:	e9 5a       	subi	r30, 0xA9	; 169
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	80 e9       	ldi	r24, 0x90	; 144
    152a:	91 e0       	ldi	r25, 0x01	; 1
    152c:	91 83       	std	Z+1, r25	; 0x01
    152e:	80 83       	st	Z, r24
    1530:	fe 01       	movw	r30, r28
    1532:	e9 5a       	subi	r30, 0xA9	; 169
    1534:	ff 4f       	sbci	r31, 0xFF	; 255
    1536:	80 81       	ld	r24, Z
    1538:	91 81       	ldd	r25, Z+1	; 0x01
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	f1 f7       	brne	.-4      	; 0x153a <LCD_displayCharacter+0x10e>
    153e:	fe 01       	movw	r30, r28
    1540:	e9 5a       	subi	r30, 0xA9	; 169
    1542:	ff 4f       	sbci	r31, 0xFF	; 255
    1544:	91 83       	std	Z+1, r25	; 0x01
    1546:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1548:	de 01       	movw	r26, r28
    154a:	a7 5a       	subi	r26, 0xA7	; 167
    154c:	bf 4f       	sbci	r27, 0xFF	; 255
    154e:	fe 01       	movw	r30, r28
    1550:	e7 5a       	subi	r30, 0xA7	; 167
    1552:	ff 4f       	sbci	r31, 0xFF	; 255
    1554:	80 81       	ld	r24, Z
    1556:	91 81       	ldd	r25, Z+1	; 0x01
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	11 96       	adiw	r26, 0x01	; 1
    155c:	9c 93       	st	X, r25
    155e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1560:	fe 01       	movw	r30, r28
    1562:	e7 5a       	subi	r30, 0xA7	; 167
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	80 81       	ld	r24, Z
    1568:	91 81       	ldd	r25, Z+1	; 0x01
    156a:	00 97       	sbiw	r24, 0x00	; 0
    156c:	d1 f6       	brne	.-76     	; 0x1522 <LCD_displayCharacter+0xf6>
    156e:	27 c0       	rjmp	.+78     	; 0x15be <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1570:	8e 01       	movw	r16, r28
    1572:	07 5a       	subi	r16, 0xA7	; 167
    1574:	1f 4f       	sbci	r17, 0xFF	; 255
    1576:	fe 01       	movw	r30, r28
    1578:	e5 5a       	subi	r30, 0xA5	; 165
    157a:	ff 4f       	sbci	r31, 0xFF	; 255
    157c:	60 81       	ld	r22, Z
    157e:	71 81       	ldd	r23, Z+1	; 0x01
    1580:	82 81       	ldd	r24, Z+2	; 0x02
    1582:	93 81       	ldd	r25, Z+3	; 0x03
    1584:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	f8 01       	movw	r30, r16
    158e:	91 83       	std	Z+1, r25	; 0x01
    1590:	80 83       	st	Z, r24
    1592:	de 01       	movw	r26, r28
    1594:	ab 5a       	subi	r26, 0xAB	; 171
    1596:	bf 4f       	sbci	r27, 0xFF	; 255
    1598:	fe 01       	movw	r30, r28
    159a:	e7 5a       	subi	r30, 0xA7	; 167
    159c:	ff 4f       	sbci	r31, 0xFF	; 255
    159e:	80 81       	ld	r24, Z
    15a0:	91 81       	ldd	r25, Z+1	; 0x01
    15a2:	8d 93       	st	X+, r24
    15a4:	9c 93       	st	X, r25
    15a6:	fe 01       	movw	r30, r28
    15a8:	eb 5a       	subi	r30, 0xAB	; 171
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	80 81       	ld	r24, Z
    15ae:	91 81       	ldd	r25, Z+1	; 0x01
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <LCD_displayCharacter+0x184>
    15b4:	fe 01       	movw	r30, r28
    15b6:	eb 5a       	subi	r30, 0xAB	; 171
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	91 83       	std	Z+1, r25	; 0x01
    15bc:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	62 e0       	ldi	r22, 0x02	; 2
    15c2:	41 e0       	ldi	r20, 0x01	; 1
    15c4:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
    15c8:	fe 01       	movw	r30, r28
    15ca:	ef 5a       	subi	r30, 0xAF	; 175
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	a0 e8       	ldi	r26, 0x80	; 128
    15d4:	bf e3       	ldi	r27, 0x3F	; 63
    15d6:	80 83       	st	Z, r24
    15d8:	91 83       	std	Z+1, r25	; 0x01
    15da:	a2 83       	std	Z+2, r26	; 0x02
    15dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15de:	8e 01       	movw	r16, r28
    15e0:	03 5b       	subi	r16, 0xB3	; 179
    15e2:	1f 4f       	sbci	r17, 0xFF	; 255
    15e4:	fe 01       	movw	r30, r28
    15e6:	ef 5a       	subi	r30, 0xAF	; 175
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	60 81       	ld	r22, Z
    15ec:	71 81       	ldd	r23, Z+1	; 0x01
    15ee:	82 81       	ldd	r24, Z+2	; 0x02
    15f0:	93 81       	ldd	r25, Z+3	; 0x03
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	4a e7       	ldi	r20, 0x7A	; 122
    15f8:	55 e4       	ldi	r21, 0x45	; 69
    15fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	f8 01       	movw	r30, r16
    1604:	80 83       	st	Z, r24
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	a2 83       	std	Z+2, r26	; 0x02
    160a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    160c:	fe 01       	movw	r30, r28
    160e:	e3 5b       	subi	r30, 0xB3	; 179
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	60 81       	ld	r22, Z
    1614:	71 81       	ldd	r23, Z+1	; 0x01
    1616:	82 81       	ldd	r24, Z+2	; 0x02
    1618:	93 81       	ldd	r25, Z+3	; 0x03
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e8       	ldi	r20, 0x80	; 128
    1620:	5f e3       	ldi	r21, 0x3F	; 63
    1622:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1626:	88 23       	and	r24, r24
    1628:	44 f4       	brge	.+16     	; 0x163a <LCD_displayCharacter+0x20e>
		__ticks = 1;
    162a:	fe 01       	movw	r30, r28
    162c:	e5 5b       	subi	r30, 0xB5	; 181
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	80 83       	st	Z, r24
    1638:	64 c0       	rjmp	.+200    	; 0x1702 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    163a:	fe 01       	movw	r30, r28
    163c:	e3 5b       	subi	r30, 0xB3	; 179
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	60 81       	ld	r22, Z
    1642:	71 81       	ldd	r23, Z+1	; 0x01
    1644:	82 81       	ldd	r24, Z+2	; 0x02
    1646:	93 81       	ldd	r25, Z+3	; 0x03
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	3f ef       	ldi	r19, 0xFF	; 255
    164c:	4f e7       	ldi	r20, 0x7F	; 127
    164e:	57 e4       	ldi	r21, 0x47	; 71
    1650:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1654:	18 16       	cp	r1, r24
    1656:	0c f0       	brlt	.+2      	; 0x165a <LCD_displayCharacter+0x22e>
    1658:	43 c0       	rjmp	.+134    	; 0x16e0 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165a:	fe 01       	movw	r30, r28
    165c:	ef 5a       	subi	r30, 0xAF	; 175
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	60 81       	ld	r22, Z
    1662:	71 81       	ldd	r23, Z+1	; 0x01
    1664:	82 81       	ldd	r24, Z+2	; 0x02
    1666:	93 81       	ldd	r25, Z+3	; 0x03
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e2       	ldi	r20, 0x20	; 32
    166e:	51 e4       	ldi	r21, 0x41	; 65
    1670:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	8e 01       	movw	r16, r28
    167a:	05 5b       	subi	r16, 0xB5	; 181
    167c:	1f 4f       	sbci	r17, 0xFF	; 255
    167e:	bc 01       	movw	r22, r24
    1680:	cd 01       	movw	r24, r26
    1682:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	f8 01       	movw	r30, r16
    168c:	91 83       	std	Z+1, r25	; 0x01
    168e:	80 83       	st	Z, r24
    1690:	1f c0       	rjmp	.+62     	; 0x16d0 <LCD_displayCharacter+0x2a4>
    1692:	fe 01       	movw	r30, r28
    1694:	e7 5b       	subi	r30, 0xB7	; 183
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	80 e9       	ldi	r24, 0x90	; 144
    169a:	91 e0       	ldi	r25, 0x01	; 1
    169c:	91 83       	std	Z+1, r25	; 0x01
    169e:	80 83       	st	Z, r24
    16a0:	fe 01       	movw	r30, r28
    16a2:	e7 5b       	subi	r30, 0xB7	; 183
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	80 81       	ld	r24, Z
    16a8:	91 81       	ldd	r25, Z+1	; 0x01
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	f1 f7       	brne	.-4      	; 0x16aa <LCD_displayCharacter+0x27e>
    16ae:	fe 01       	movw	r30, r28
    16b0:	e7 5b       	subi	r30, 0xB7	; 183
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	91 83       	std	Z+1, r25	; 0x01
    16b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b8:	de 01       	movw	r26, r28
    16ba:	a5 5b       	subi	r26, 0xB5	; 181
    16bc:	bf 4f       	sbci	r27, 0xFF	; 255
    16be:	fe 01       	movw	r30, r28
    16c0:	e5 5b       	subi	r30, 0xB5	; 181
    16c2:	ff 4f       	sbci	r31, 0xFF	; 255
    16c4:	80 81       	ld	r24, Z
    16c6:	91 81       	ldd	r25, Z+1	; 0x01
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	11 96       	adiw	r26, 0x01	; 1
    16cc:	9c 93       	st	X, r25
    16ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d0:	fe 01       	movw	r30, r28
    16d2:	e5 5b       	subi	r30, 0xB5	; 181
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	80 81       	ld	r24, Z
    16d8:	91 81       	ldd	r25, Z+1	; 0x01
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	d1 f6       	brne	.-76     	; 0x1692 <LCD_displayCharacter+0x266>
    16de:	27 c0       	rjmp	.+78     	; 0x172e <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e0:	8e 01       	movw	r16, r28
    16e2:	05 5b       	subi	r16, 0xB5	; 181
    16e4:	1f 4f       	sbci	r17, 0xFF	; 255
    16e6:	fe 01       	movw	r30, r28
    16e8:	e3 5b       	subi	r30, 0xB3	; 179
    16ea:	ff 4f       	sbci	r31, 0xFF	; 255
    16ec:	60 81       	ld	r22, Z
    16ee:	71 81       	ldd	r23, Z+1	; 0x01
    16f0:	82 81       	ldd	r24, Z+2	; 0x02
    16f2:	93 81       	ldd	r25, Z+3	; 0x03
    16f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	f8 01       	movw	r30, r16
    16fe:	91 83       	std	Z+1, r25	; 0x01
    1700:	80 83       	st	Z, r24
    1702:	de 01       	movw	r26, r28
    1704:	a9 5b       	subi	r26, 0xB9	; 185
    1706:	bf 4f       	sbci	r27, 0xFF	; 255
    1708:	fe 01       	movw	r30, r28
    170a:	e5 5b       	subi	r30, 0xB5	; 181
    170c:	ff 4f       	sbci	r31, 0xFF	; 255
    170e:	80 81       	ld	r24, Z
    1710:	91 81       	ldd	r25, Z+1	; 0x01
    1712:	8d 93       	st	X+, r24
    1714:	9c 93       	st	X, r25
    1716:	fe 01       	movw	r30, r28
    1718:	e9 5b       	subi	r30, 0xB9	; 185
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	80 81       	ld	r24, Z
    171e:	91 81       	ldd	r25, Z+1	; 0x01
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <LCD_displayCharacter+0x2f4>
    1724:	fe 01       	movw	r30, r28
    1726:	e9 5b       	subi	r30, 0xB9	; 185
    1728:	ff 4f       	sbci	r31, 0xFF	; 255
    172a:	91 83       	std	Z+1, r25	; 0x01
    172c:	80 83       	st	Z, r24
	_delay_ms(1);
#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(character,4));
    172e:	fe 01       	movw	r30, r28
    1730:	ed 59       	subi	r30, 0x9D	; 157
    1732:	ff 4f       	sbci	r31, 0xFF	; 255
    1734:	80 81       	ld	r24, Z
    1736:	88 2f       	mov	r24, r24
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	80 71       	andi	r24, 0x10	; 16
    173c:	90 70       	andi	r25, 0x00	; 0
    173e:	95 95       	asr	r25
    1740:	87 95       	ror	r24
    1742:	95 95       	asr	r25
    1744:	87 95       	ror	r24
    1746:	95 95       	asr	r25
    1748:	87 95       	ror	r24
    174a:	95 95       	asr	r25
    174c:	87 95       	ror	r24
    174e:	98 2f       	mov	r25, r24
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	63 e0       	ldi	r22, 0x03	; 3
    1754:	49 2f       	mov	r20, r25
    1756:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(character,5));
    175a:	fe 01       	movw	r30, r28
    175c:	ed 59       	subi	r30, 0x9D	; 157
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	80 81       	ld	r24, Z
    1762:	88 2f       	mov	r24, r24
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	80 72       	andi	r24, 0x20	; 32
    1768:	90 70       	andi	r25, 0x00	; 0
    176a:	95 95       	asr	r25
    176c:	87 95       	ror	r24
    176e:	95 95       	asr	r25
    1770:	87 95       	ror	r24
    1772:	95 95       	asr	r25
    1774:	87 95       	ror	r24
    1776:	95 95       	asr	r25
    1778:	87 95       	ror	r24
    177a:	95 95       	asr	r25
    177c:	87 95       	ror	r24
    177e:	98 2f       	mov	r25, r24
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	64 e0       	ldi	r22, 0x04	; 4
    1784:	49 2f       	mov	r20, r25
    1786:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(character,6));
    178a:	fe 01       	movw	r30, r28
    178c:	ed 59       	subi	r30, 0x9D	; 157
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	80 81       	ld	r24, Z
    1792:	88 2f       	mov	r24, r24
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	80 74       	andi	r24, 0x40	; 64
    1798:	90 70       	andi	r25, 0x00	; 0
    179a:	08 2e       	mov	r0, r24
    179c:	89 2f       	mov	r24, r25
    179e:	00 0c       	add	r0, r0
    17a0:	88 1f       	adc	r24, r24
    17a2:	99 0b       	sbc	r25, r25
    17a4:	00 0c       	add	r0, r0
    17a6:	88 1f       	adc	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	98 2f       	mov	r25, r24
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	65 e0       	ldi	r22, 0x05	; 5
    17b0:	49 2f       	mov	r20, r25
    17b2:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(character,7));
    17b6:	fe 01       	movw	r30, r28
    17b8:	ed 59       	subi	r30, 0x9D	; 157
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	80 81       	ld	r24, Z
    17be:	98 2f       	mov	r25, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	99 27       	eor	r25, r25
    17c4:	99 1f       	adc	r25, r25
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	66 e0       	ldi	r22, 0x06	; 6
    17ca:	49 2f       	mov	r20, r25
    17cc:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
    17d0:	fe 01       	movw	r30, r28
    17d2:	ed 5b       	subi	r30, 0xBD	; 189
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a0 e8       	ldi	r26, 0x80	; 128
    17dc:	bf e3       	ldi	r27, 0x3F	; 63
    17de:	80 83       	st	Z, r24
    17e0:	91 83       	std	Z+1, r25	; 0x01
    17e2:	a2 83       	std	Z+2, r26	; 0x02
    17e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e6:	8e 01       	movw	r16, r28
    17e8:	01 5c       	subi	r16, 0xC1	; 193
    17ea:	1f 4f       	sbci	r17, 0xFF	; 255
    17ec:	fe 01       	movw	r30, r28
    17ee:	ed 5b       	subi	r30, 0xBD	; 189
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	60 81       	ld	r22, Z
    17f4:	71 81       	ldd	r23, Z+1	; 0x01
    17f6:	82 81       	ldd	r24, Z+2	; 0x02
    17f8:	93 81       	ldd	r25, Z+3	; 0x03
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	4a e7       	ldi	r20, 0x7A	; 122
    1800:	55 e4       	ldi	r21, 0x45	; 69
    1802:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	f8 01       	movw	r30, r16
    180c:	80 83       	st	Z, r24
    180e:	91 83       	std	Z+1, r25	; 0x01
    1810:	a2 83       	std	Z+2, r26	; 0x02
    1812:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1814:	fe 01       	movw	r30, r28
    1816:	ff 96       	adiw	r30, 0x3f	; 63
    1818:	60 81       	ld	r22, Z
    181a:	71 81       	ldd	r23, Z+1	; 0x01
    181c:	82 81       	ldd	r24, Z+2	; 0x02
    181e:	93 81       	ldd	r25, Z+3	; 0x03
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e8       	ldi	r20, 0x80	; 128
    1826:	5f e3       	ldi	r21, 0x3F	; 63
    1828:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    182c:	88 23       	and	r24, r24
    182e:	2c f4       	brge	.+10     	; 0x183a <LCD_displayCharacter+0x40e>
		__ticks = 1;
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	9e af       	std	Y+62, r25	; 0x3e
    1836:	8d af       	std	Y+61, r24	; 0x3d
    1838:	46 c0       	rjmp	.+140    	; 0x18c6 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    183a:	fe 01       	movw	r30, r28
    183c:	ff 96       	adiw	r30, 0x3f	; 63
    183e:	60 81       	ld	r22, Z
    1840:	71 81       	ldd	r23, Z+1	; 0x01
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	93 81       	ldd	r25, Z+3	; 0x03
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	3f ef       	ldi	r19, 0xFF	; 255
    184a:	4f e7       	ldi	r20, 0x7F	; 127
    184c:	57 e4       	ldi	r21, 0x47	; 71
    184e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1852:	18 16       	cp	r1, r24
    1854:	64 f5       	brge	.+88     	; 0x18ae <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1856:	fe 01       	movw	r30, r28
    1858:	ed 5b       	subi	r30, 0xBD	; 189
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	60 81       	ld	r22, Z
    185e:	71 81       	ldd	r23, Z+1	; 0x01
    1860:	82 81       	ldd	r24, Z+2	; 0x02
    1862:	93 81       	ldd	r25, Z+3	; 0x03
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e2       	ldi	r20, 0x20	; 32
    186a:	51 e4       	ldi	r21, 0x41	; 65
    186c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	bc 01       	movw	r22, r24
    1876:	cd 01       	movw	r24, r26
    1878:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	9e af       	std	Y+62, r25	; 0x3e
    1882:	8d af       	std	Y+61, r24	; 0x3d
    1884:	0f c0       	rjmp	.+30     	; 0x18a4 <LCD_displayCharacter+0x478>
    1886:	80 e9       	ldi	r24, 0x90	; 144
    1888:	91 e0       	ldi	r25, 0x01	; 1
    188a:	9c af       	std	Y+60, r25	; 0x3c
    188c:	8b af       	std	Y+59, r24	; 0x3b
    188e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1890:	9c ad       	ldd	r25, Y+60	; 0x3c
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <LCD_displayCharacter+0x466>
    1896:	9c af       	std	Y+60, r25	; 0x3c
    1898:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189a:	8d ad       	ldd	r24, Y+61	; 0x3d
    189c:	9e ad       	ldd	r25, Y+62	; 0x3e
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	9e af       	std	Y+62, r25	; 0x3e
    18a2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    18a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	69 f7       	brne	.-38     	; 0x1886 <LCD_displayCharacter+0x45a>
    18ac:	16 c0       	rjmp	.+44     	; 0x18da <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ae:	fe 01       	movw	r30, r28
    18b0:	ff 96       	adiw	r30, 0x3f	; 63
    18b2:	60 81       	ld	r22, Z
    18b4:	71 81       	ldd	r23, Z+1	; 0x01
    18b6:	82 81       	ldd	r24, Z+2	; 0x02
    18b8:	93 81       	ldd	r25, Z+3	; 0x03
    18ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	9e af       	std	Y+62, r25	; 0x3e
    18c4:	8d af       	std	Y+61, r24	; 0x3d
    18c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    18c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    18ca:	9a af       	std	Y+58, r25	; 0x3a
    18cc:	89 af       	std	Y+57, r24	; 0x39
    18ce:	89 ad       	ldd	r24, Y+57	; 0x39
    18d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <LCD_displayCharacter+0x4a6>
    18d6:	9a af       	std	Y+58, r25	; 0x3a
    18d8:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	62 e0       	ldi	r22, 0x02	; 2
    18de:	40 e0       	ldi	r20, 0x00	; 0
    18e0:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	a0 e8       	ldi	r26, 0x80	; 128
    18ea:	bf e3       	ldi	r27, 0x3F	; 63
    18ec:	8d ab       	std	Y+53, r24	; 0x35
    18ee:	9e ab       	std	Y+54, r25	; 0x36
    18f0:	af ab       	std	Y+55, r26	; 0x37
    18f2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f4:	6d a9       	ldd	r22, Y+53	; 0x35
    18f6:	7e a9       	ldd	r23, Y+54	; 0x36
    18f8:	8f a9       	ldd	r24, Y+55	; 0x37
    18fa:	98 ad       	ldd	r25, Y+56	; 0x38
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	4a e7       	ldi	r20, 0x7A	; 122
    1902:	55 e4       	ldi	r21, 0x45	; 69
    1904:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	89 ab       	std	Y+49, r24	; 0x31
    190e:	9a ab       	std	Y+50, r25	; 0x32
    1910:	ab ab       	std	Y+51, r26	; 0x33
    1912:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1914:	69 a9       	ldd	r22, Y+49	; 0x31
    1916:	7a a9       	ldd	r23, Y+50	; 0x32
    1918:	8b a9       	ldd	r24, Y+51	; 0x33
    191a:	9c a9       	ldd	r25, Y+52	; 0x34
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	40 e8       	ldi	r20, 0x80	; 128
    1922:	5f e3       	ldi	r21, 0x3F	; 63
    1924:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1928:	88 23       	and	r24, r24
    192a:	2c f4       	brge	.+10     	; 0x1936 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	98 ab       	std	Y+48, r25	; 0x30
    1932:	8f a7       	std	Y+47, r24	; 0x2f
    1934:	3f c0       	rjmp	.+126    	; 0x19b4 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    1936:	69 a9       	ldd	r22, Y+49	; 0x31
    1938:	7a a9       	ldd	r23, Y+50	; 0x32
    193a:	8b a9       	ldd	r24, Y+51	; 0x33
    193c:	9c a9       	ldd	r25, Y+52	; 0x34
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	3f ef       	ldi	r19, 0xFF	; 255
    1942:	4f e7       	ldi	r20, 0x7F	; 127
    1944:	57 e4       	ldi	r21, 0x47	; 71
    1946:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    194a:	18 16       	cp	r1, r24
    194c:	4c f5       	brge	.+82     	; 0x19a0 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194e:	6d a9       	ldd	r22, Y+53	; 0x35
    1950:	7e a9       	ldd	r23, Y+54	; 0x36
    1952:	8f a9       	ldd	r24, Y+55	; 0x37
    1954:	98 ad       	ldd	r25, Y+56	; 0x38
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	40 e2       	ldi	r20, 0x20	; 32
    195c:	51 e4       	ldi	r21, 0x41	; 65
    195e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	bc 01       	movw	r22, r24
    1968:	cd 01       	movw	r24, r26
    196a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	98 ab       	std	Y+48, r25	; 0x30
    1974:	8f a7       	std	Y+47, r24	; 0x2f
    1976:	0f c0       	rjmp	.+30     	; 0x1996 <LCD_displayCharacter+0x56a>
    1978:	80 e9       	ldi	r24, 0x90	; 144
    197a:	91 e0       	ldi	r25, 0x01	; 1
    197c:	9e a7       	std	Y+46, r25	; 0x2e
    197e:	8d a7       	std	Y+45, r24	; 0x2d
    1980:	8d a5       	ldd	r24, Y+45	; 0x2d
    1982:	9e a5       	ldd	r25, Y+46	; 0x2e
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <LCD_displayCharacter+0x558>
    1988:	9e a7       	std	Y+46, r25	; 0x2e
    198a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198c:	8f a5       	ldd	r24, Y+47	; 0x2f
    198e:	98 a9       	ldd	r25, Y+48	; 0x30
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	98 ab       	std	Y+48, r25	; 0x30
    1994:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1996:	8f a5       	ldd	r24, Y+47	; 0x2f
    1998:	98 a9       	ldd	r25, Y+48	; 0x30
    199a:	00 97       	sbiw	r24, 0x00	; 0
    199c:	69 f7       	brne	.-38     	; 0x1978 <LCD_displayCharacter+0x54c>
    199e:	14 c0       	rjmp	.+40     	; 0x19c8 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a0:	69 a9       	ldd	r22, Y+49	; 0x31
    19a2:	7a a9       	ldd	r23, Y+50	; 0x32
    19a4:	8b a9       	ldd	r24, Y+51	; 0x33
    19a6:	9c a9       	ldd	r25, Y+52	; 0x34
    19a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	98 ab       	std	Y+48, r25	; 0x30
    19b2:	8f a7       	std	Y+47, r24	; 0x2f
    19b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    19b6:	98 a9       	ldd	r25, Y+48	; 0x30
    19b8:	9c a7       	std	Y+44, r25	; 0x2c
    19ba:	8b a7       	std	Y+43, r24	; 0x2b
    19bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    19be:	9c a5       	ldd	r25, Y+44	; 0x2c
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	f1 f7       	brne	.-4      	; 0x19c0 <LCD_displayCharacter+0x594>
    19c4:	9c a7       	std	Y+44, r25	; 0x2c
    19c6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	62 e0       	ldi	r22, 0x02	; 2
    19cc:	41 e0       	ldi	r20, 0x01	; 1
    19ce:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	a0 e8       	ldi	r26, 0x80	; 128
    19d8:	bf e3       	ldi	r27, 0x3F	; 63
    19da:	8f a3       	std	Y+39, r24	; 0x27
    19dc:	98 a7       	std	Y+40, r25	; 0x28
    19de:	a9 a7       	std	Y+41, r26	; 0x29
    19e0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e2:	6f a1       	ldd	r22, Y+39	; 0x27
    19e4:	78 a5       	ldd	r23, Y+40	; 0x28
    19e6:	89 a5       	ldd	r24, Y+41	; 0x29
    19e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	4a e7       	ldi	r20, 0x7A	; 122
    19f0:	55 e4       	ldi	r21, 0x45	; 69
    19f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	8b a3       	std	Y+35, r24	; 0x23
    19fc:	9c a3       	std	Y+36, r25	; 0x24
    19fe:	ad a3       	std	Y+37, r26	; 0x25
    1a00:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a02:	6b a1       	ldd	r22, Y+35	; 0x23
    1a04:	7c a1       	ldd	r23, Y+36	; 0x24
    1a06:	8d a1       	ldd	r24, Y+37	; 0x25
    1a08:	9e a1       	ldd	r25, Y+38	; 0x26
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	40 e8       	ldi	r20, 0x80	; 128
    1a10:	5f e3       	ldi	r21, 0x3F	; 63
    1a12:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a16:	88 23       	and	r24, r24
    1a18:	2c f4       	brge	.+10     	; 0x1a24 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	9a a3       	std	Y+34, r25	; 0x22
    1a20:	89 a3       	std	Y+33, r24	; 0x21
    1a22:	3f c0       	rjmp	.+126    	; 0x1aa2 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    1a24:	6b a1       	ldd	r22, Y+35	; 0x23
    1a26:	7c a1       	ldd	r23, Y+36	; 0x24
    1a28:	8d a1       	ldd	r24, Y+37	; 0x25
    1a2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	3f ef       	ldi	r19, 0xFF	; 255
    1a30:	4f e7       	ldi	r20, 0x7F	; 127
    1a32:	57 e4       	ldi	r21, 0x47	; 71
    1a34:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a38:	18 16       	cp	r1, r24
    1a3a:	4c f5       	brge	.+82     	; 0x1a8e <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3c:	6f a1       	ldd	r22, Y+39	; 0x27
    1a3e:	78 a5       	ldd	r23, Y+40	; 0x28
    1a40:	89 a5       	ldd	r24, Y+41	; 0x29
    1a42:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e2       	ldi	r20, 0x20	; 32
    1a4a:	51 e4       	ldi	r21, 0x41	; 65
    1a4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	bc 01       	movw	r22, r24
    1a56:	cd 01       	movw	r24, r26
    1a58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	9a a3       	std	Y+34, r25	; 0x22
    1a62:	89 a3       	std	Y+33, r24	; 0x21
    1a64:	0f c0       	rjmp	.+30     	; 0x1a84 <LCD_displayCharacter+0x658>
    1a66:	80 e9       	ldi	r24, 0x90	; 144
    1a68:	91 e0       	ldi	r25, 0x01	; 1
    1a6a:	98 a3       	std	Y+32, r25	; 0x20
    1a6c:	8f 8f       	std	Y+31, r24	; 0x1f
    1a6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a70:	98 a1       	ldd	r25, Y+32	; 0x20
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <LCD_displayCharacter+0x646>
    1a76:	98 a3       	std	Y+32, r25	; 0x20
    1a78:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	9a a3       	std	Y+34, r25	; 0x22
    1a82:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a84:	89 a1       	ldd	r24, Y+33	; 0x21
    1a86:	9a a1       	ldd	r25, Y+34	; 0x22
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	69 f7       	brne	.-38     	; 0x1a66 <LCD_displayCharacter+0x63a>
    1a8c:	14 c0       	rjmp	.+40     	; 0x1ab6 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a90:	7c a1       	ldd	r23, Y+36	; 0x24
    1a92:	8d a1       	ldd	r24, Y+37	; 0x25
    1a94:	9e a1       	ldd	r25, Y+38	; 0x26
    1a96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	9a a3       	std	Y+34, r25	; 0x22
    1aa0:	89 a3       	std	Y+33, r24	; 0x21
    1aa2:	89 a1       	ldd	r24, Y+33	; 0x21
    1aa4:	9a a1       	ldd	r25, Y+34	; 0x22
    1aa6:	9e 8f       	std	Y+30, r25	; 0x1e
    1aa8:	8d 8f       	std	Y+29, r24	; 0x1d
    1aaa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <LCD_displayCharacter+0x682>
    1ab2:	9e 8f       	std	Y+30, r25	; 0x1e
    1ab4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(character,0));
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	ed 59       	subi	r30, 0x9D	; 157
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	80 81       	ld	r24, Z
    1abe:	98 2f       	mov	r25, r24
    1ac0:	91 70       	andi	r25, 0x01	; 1
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	63 e0       	ldi	r22, 0x03	; 3
    1ac6:	49 2f       	mov	r20, r25
    1ac8:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(character,1));
    1acc:	fe 01       	movw	r30, r28
    1ace:	ed 59       	subi	r30, 0x9D	; 157
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	80 81       	ld	r24, Z
    1ad4:	88 2f       	mov	r24, r24
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	82 70       	andi	r24, 0x02	; 2
    1ada:	90 70       	andi	r25, 0x00	; 0
    1adc:	95 95       	asr	r25
    1ade:	87 95       	ror	r24
    1ae0:	98 2f       	mov	r25, r24
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	64 e0       	ldi	r22, 0x04	; 4
    1ae6:	49 2f       	mov	r20, r25
    1ae8:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(character,2));
    1aec:	fe 01       	movw	r30, r28
    1aee:	ed 59       	subi	r30, 0x9D	; 157
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	80 81       	ld	r24, Z
    1af4:	88 2f       	mov	r24, r24
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	84 70       	andi	r24, 0x04	; 4
    1afa:	90 70       	andi	r25, 0x00	; 0
    1afc:	95 95       	asr	r25
    1afe:	87 95       	ror	r24
    1b00:	95 95       	asr	r25
    1b02:	87 95       	ror	r24
    1b04:	98 2f       	mov	r25, r24
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	65 e0       	ldi	r22, 0x05	; 5
    1b0a:	49 2f       	mov	r20, r25
    1b0c:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(character,3));
    1b10:	fe 01       	movw	r30, r28
    1b12:	ed 59       	subi	r30, 0x9D	; 157
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	80 81       	ld	r24, Z
    1b18:	88 2f       	mov	r24, r24
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	88 70       	andi	r24, 0x08	; 8
    1b1e:	90 70       	andi	r25, 0x00	; 0
    1b20:	95 95       	asr	r25
    1b22:	87 95       	ror	r24
    1b24:	95 95       	asr	r25
    1b26:	87 95       	ror	r24
    1b28:	95 95       	asr	r25
    1b2a:	87 95       	ror	r24
    1b2c:	98 2f       	mov	r25, r24
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	66 e0       	ldi	r22, 0x06	; 6
    1b32:	49 2f       	mov	r20, r25
    1b34:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	a0 e8       	ldi	r26, 0x80	; 128
    1b3e:	bf e3       	ldi	r27, 0x3F	; 63
    1b40:	89 8f       	std	Y+25, r24	; 0x19
    1b42:	9a 8f       	std	Y+26, r25	; 0x1a
    1b44:	ab 8f       	std	Y+27, r26	; 0x1b
    1b46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b48:	69 8d       	ldd	r22, Y+25	; 0x19
    1b4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	4a e7       	ldi	r20, 0x7A	; 122
    1b56:	55 e4       	ldi	r21, 0x45	; 69
    1b58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	8d 8b       	std	Y+21, r24	; 0x15
    1b62:	9e 8b       	std	Y+22, r25	; 0x16
    1b64:	af 8b       	std	Y+23, r26	; 0x17
    1b66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b68:	6d 89       	ldd	r22, Y+21	; 0x15
    1b6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	40 e8       	ldi	r20, 0x80	; 128
    1b76:	5f e3       	ldi	r21, 0x3F	; 63
    1b78:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b7c:	88 23       	and	r24, r24
    1b7e:	2c f4       	brge	.+10     	; 0x1b8a <LCD_displayCharacter+0x75e>
		__ticks = 1;
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	9c 8b       	std	Y+20, r25	; 0x14
    1b86:	8b 8b       	std	Y+19, r24	; 0x13
    1b88:	3f c0       	rjmp	.+126    	; 0x1c08 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    1b8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b90:	98 8d       	ldd	r25, Y+24	; 0x18
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	3f ef       	ldi	r19, 0xFF	; 255
    1b96:	4f e7       	ldi	r20, 0x7F	; 127
    1b98:	57 e4       	ldi	r21, 0x47	; 71
    1b9a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b9e:	18 16       	cp	r1, r24
    1ba0:	4c f5       	brge	.+82     	; 0x1bf4 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ba4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ba6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ba8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e2       	ldi	r20, 0x20	; 32
    1bb0:	51 e4       	ldi	r21, 0x41	; 65
    1bb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	bc 01       	movw	r22, r24
    1bbc:	cd 01       	movw	r24, r26
    1bbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	9c 8b       	std	Y+20, r25	; 0x14
    1bc8:	8b 8b       	std	Y+19, r24	; 0x13
    1bca:	0f c0       	rjmp	.+30     	; 0x1bea <LCD_displayCharacter+0x7be>
    1bcc:	80 e9       	ldi	r24, 0x90	; 144
    1bce:	91 e0       	ldi	r25, 0x01	; 1
    1bd0:	9a 8b       	std	Y+18, r25	; 0x12
    1bd2:	89 8b       	std	Y+17, r24	; 0x11
    1bd4:	89 89       	ldd	r24, Y+17	; 0x11
    1bd6:	9a 89       	ldd	r25, Y+18	; 0x12
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	f1 f7       	brne	.-4      	; 0x1bd8 <LCD_displayCharacter+0x7ac>
    1bdc:	9a 8b       	std	Y+18, r25	; 0x12
    1bde:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be0:	8b 89       	ldd	r24, Y+19	; 0x13
    1be2:	9c 89       	ldd	r25, Y+20	; 0x14
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	9c 8b       	std	Y+20, r25	; 0x14
    1be8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bea:	8b 89       	ldd	r24, Y+19	; 0x13
    1bec:	9c 89       	ldd	r25, Y+20	; 0x14
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	69 f7       	brne	.-38     	; 0x1bcc <LCD_displayCharacter+0x7a0>
    1bf2:	14 c0       	rjmp	.+40     	; 0x1c1c <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf4:	6d 89       	ldd	r22, Y+21	; 0x15
    1bf6:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1bfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	9c 8b       	std	Y+20, r25	; 0x14
    1c06:	8b 8b       	std	Y+19, r24	; 0x13
    1c08:	8b 89       	ldd	r24, Y+19	; 0x13
    1c0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c0c:	98 8b       	std	Y+16, r25	; 0x10
    1c0e:	8f 87       	std	Y+15, r24	; 0x0f
    1c10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c12:	98 89       	ldd	r25, Y+16	; 0x10
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	f1 f7       	brne	.-4      	; 0x1c14 <LCD_displayCharacter+0x7e8>
    1c18:	98 8b       	std	Y+16, r25	; 0x10
    1c1a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	62 e0       	ldi	r22, 0x02	; 2
    1c20:	40 e0       	ldi	r20, 0x00	; 0
    1c22:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePin>
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	a0 e8       	ldi	r26, 0x80	; 128
    1c2c:	bf e3       	ldi	r27, 0x3F	; 63
    1c2e:	8b 87       	std	Y+11, r24	; 0x0b
    1c30:	9c 87       	std	Y+12, r25	; 0x0c
    1c32:	ad 87       	std	Y+13, r26	; 0x0d
    1c34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	4a e7       	ldi	r20, 0x7A	; 122
    1c44:	55 e4       	ldi	r21, 0x45	; 69
    1c46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	8f 83       	std	Y+7, r24	; 0x07
    1c50:	98 87       	std	Y+8, r25	; 0x08
    1c52:	a9 87       	std	Y+9, r26	; 0x09
    1c54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c56:	6f 81       	ldd	r22, Y+7	; 0x07
    1c58:	78 85       	ldd	r23, Y+8	; 0x08
    1c5a:	89 85       	ldd	r24, Y+9	; 0x09
    1c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e8       	ldi	r20, 0x80	; 128
    1c64:	5f e3       	ldi	r21, 0x3F	; 63
    1c66:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c6a:	88 23       	and	r24, r24
    1c6c:	2c f4       	brge	.+10     	; 0x1c78 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	9e 83       	std	Y+6, r25	; 0x06
    1c74:	8d 83       	std	Y+5, r24	; 0x05
    1c76:	3f c0       	rjmp	.+126    	; 0x1cf6 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    1c78:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7a:	78 85       	ldd	r23, Y+8	; 0x08
    1c7c:	89 85       	ldd	r24, Y+9	; 0x09
    1c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	3f ef       	ldi	r19, 0xFF	; 255
    1c84:	4f e7       	ldi	r20, 0x7F	; 127
    1c86:	57 e4       	ldi	r21, 0x47	; 71
    1c88:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c8c:	18 16       	cp	r1, r24
    1c8e:	4c f5       	brge	.+82     	; 0x1ce2 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 e2       	ldi	r20, 0x20	; 32
    1c9e:	51 e4       	ldi	r21, 0x41	; 65
    1ca0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	bc 01       	movw	r22, r24
    1caa:	cd 01       	movw	r24, r26
    1cac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	9e 83       	std	Y+6, r25	; 0x06
    1cb6:	8d 83       	std	Y+5, r24	; 0x05
    1cb8:	0f c0       	rjmp	.+30     	; 0x1cd8 <LCD_displayCharacter+0x8ac>
    1cba:	80 e9       	ldi	r24, 0x90	; 144
    1cbc:	91 e0       	ldi	r25, 0x01	; 1
    1cbe:	9c 83       	std	Y+4, r25	; 0x04
    1cc0:	8b 83       	std	Y+3, r24	; 0x03
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <LCD_displayCharacter+0x89a>
    1cca:	9c 83       	std	Y+4, r25	; 0x04
    1ccc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cce:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	9e 83       	std	Y+6, r25	; 0x06
    1cd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cda:	9e 81       	ldd	r25, Y+6	; 0x06
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	69 f7       	brne	.-38     	; 0x1cba <LCD_displayCharacter+0x88e>
    1ce0:	14 c0       	rjmp	.+40     	; 0x1d0a <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce4:	78 85       	ldd	r23, Y+8	; 0x08
    1ce6:	89 85       	ldd	r24, Y+9	; 0x09
    1ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	9e 83       	std	Y+6, r25	; 0x06
    1cf4:	8d 83       	std	Y+5, r24	; 0x05
    1cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfa:	9a 83       	std	Y+2, r25	; 0x02
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	9a 81       	ldd	r25, Y+2	; 0x02
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <LCD_displayCharacter+0x8d6>
    1d06:	9a 83       	std	Y+2, r25	; 0x02
    1d08:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,character);
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
	_delay_ms(1);
#endif
}
    1d0a:	cd 59       	subi	r28, 0x9D	; 157
    1d0c:	df 4f       	sbci	r29, 0xFF	; 255
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	f8 94       	cli
    1d12:	de bf       	out	0x3e, r29	; 62
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	cd bf       	out	0x3d, r28	; 61
    1d18:	cf 91       	pop	r28
    1d1a:	df 91       	pop	r29
    1d1c:	1f 91       	pop	r17
    1d1e:	0f 91       	pop	r16
    1d20:	08 95       	ret

00001d22 <LCD_init>:
void LCD_init(void)
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	2e 97       	sbiw	r28, 0x0e	; 14
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	de bf       	out	0x3e, r29	; 62
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	61 e0       	ldi	r22, 0x01	; 1
    1d3a:	41 e0       	ldi	r20, 0x01	; 1
    1d3c:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	62 e0       	ldi	r22, 0x02	; 2
    1d44:	41 e0       	ldi	r20, 0x01	; 1
    1d46:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <GPIO_setupPinDirection>
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	a0 ea       	ldi	r26, 0xA0	; 160
    1d50:	b1 e4       	ldi	r27, 0x41	; 65
    1d52:	8b 87       	std	Y+11, r24	; 0x0b
    1d54:	9c 87       	std	Y+12, r25	; 0x0c
    1d56:	ad 87       	std	Y+13, r26	; 0x0d
    1d58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	4a e7       	ldi	r20, 0x7A	; 122
    1d68:	55 e4       	ldi	r21, 0x45	; 69
    1d6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	8f 83       	std	Y+7, r24	; 0x07
    1d74:	98 87       	std	Y+8, r25	; 0x08
    1d76:	a9 87       	std	Y+9, r26	; 0x09
    1d78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d7c:	78 85       	ldd	r23, Y+8	; 0x08
    1d7e:	89 85       	ldd	r24, Y+9	; 0x09
    1d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e8       	ldi	r20, 0x80	; 128
    1d88:	5f e3       	ldi	r21, 0x3F	; 63
    1d8a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d8e:	88 23       	and	r24, r24
    1d90:	2c f4       	brge	.+10     	; 0x1d9c <LCD_init+0x7a>
		__ticks = 1;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	9e 83       	std	Y+6, r25	; 0x06
    1d98:	8d 83       	std	Y+5, r24	; 0x05
    1d9a:	3f c0       	rjmp	.+126    	; 0x1e1a <LCD_init+0xf8>
	else if (__tmp > 65535)
    1d9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9e:	78 85       	ldd	r23, Y+8	; 0x08
    1da0:	89 85       	ldd	r24, Y+9	; 0x09
    1da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	3f ef       	ldi	r19, 0xFF	; 255
    1da8:	4f e7       	ldi	r20, 0x7F	; 127
    1daa:	57 e4       	ldi	r21, 0x47	; 71
    1dac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1db0:	18 16       	cp	r1, r24
    1db2:	4c f5       	brge	.+82     	; 0x1e06 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	40 e2       	ldi	r20, 0x20	; 32
    1dc2:	51 e4       	ldi	r21, 0x41	; 65
    1dc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	bc 01       	movw	r22, r24
    1dce:	cd 01       	movw	r24, r26
    1dd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9e 83       	std	Y+6, r25	; 0x06
    1dda:	8d 83       	std	Y+5, r24	; 0x05
    1ddc:	0f c0       	rjmp	.+30     	; 0x1dfc <LCD_init+0xda>
    1dde:	80 e9       	ldi	r24, 0x90	; 144
    1de0:	91 e0       	ldi	r25, 0x01	; 1
    1de2:	9c 83       	std	Y+4, r25	; 0x04
    1de4:	8b 83       	std	Y+3, r24	; 0x03
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <LCD_init+0xc8>
    1dee:	9c 83       	std	Y+4, r25	; 0x04
    1df0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df2:	8d 81       	ldd	r24, Y+5	; 0x05
    1df4:	9e 81       	ldd	r25, Y+6	; 0x06
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	9e 83       	std	Y+6, r25	; 0x06
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	69 f7       	brne	.-38     	; 0x1dde <LCD_init+0xbc>
    1e04:	14 c0       	rjmp	.+40     	; 0x1e2e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e06:	6f 81       	ldd	r22, Y+7	; 0x07
    1e08:	78 85       	ldd	r23, Y+8	; 0x08
    1e0a:	89 85       	ldd	r24, Y+9	; 0x09
    1e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	9e 83       	std	Y+6, r25	; 0x06
    1e18:	8d 83       	std	Y+5, r24	; 0x05
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	9a 83       	std	Y+2, r25	; 0x02
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	9a 81       	ldd	r25, Y+2	; 0x02
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <LCD_init+0x104>
    1e2a:	9a 83       	std	Y+2, r25	; 0x02
    1e2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
#if(LCD_DATA_BITS_MODE == 4)

	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	63 e0       	ldi	r22, 0x03	; 3
    1e32:	41 e0       	ldi	r20, 0x01	; 1
    1e34:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	64 e0       	ldi	r22, 0x04	; 4
    1e3c:	41 e0       	ldi	r20, 0x01	; 1
    1e3e:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	65 e0       	ldi	r22, 0x05	; 5
    1e46:	41 e0       	ldi	r20, 0x01	; 1
    1e48:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	66 e0       	ldi	r22, 0x06	; 6
    1e50:	41 e0       	ldi	r20, 0x01	; 1
    1e52:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <GPIO_setupPinDirection>


	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1e56:	83 e3       	ldi	r24, 0x33	; 51
    1e58:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1e5c:	82 e3       	ldi	r24, 0x32	; 50
    1e5e:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_sendCommand>


	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1e62:	88 e2       	ldi	r24, 0x28	; 40
    1e64:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_sendCommand>


	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
#endif

	LCD_sendCommand(LCD_CURSOR_OFF);
    1e68:	8c e0       	ldi	r24, 0x0C	; 12
    1e6a:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_sendCommand>
}
    1e74:	2e 96       	adiw	r28, 0x0e	; 14
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	f8 94       	cli
    1e7a:	de bf       	out	0x3e, r29	; 62
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	cd bf       	out	0x3d, r28	; 61
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	08 95       	ret

00001e86 <LCD_displayString>:
void LCD_displayString(const char *ptr)
{
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <LCD_displayString+0x6>
    1e8c:	0f 92       	push	r0
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	9b 83       	std	Y+3, r25	; 0x03
    1e94:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for (i = 0; ptr[i] != '\0'; i++)
    1e96:	19 82       	std	Y+1, r1	; 0x01
    1e98:	0e c0       	rjmp	.+28     	; 0x1eb6 <LCD_displayString+0x30>
	{
		LCD_displayCharacter(ptr[i]);
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	e2 0f       	add	r30, r18
    1ea8:	f3 1f       	adc	r31, r19
    1eaa:	80 81       	ld	r24, Z
    1eac:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD_displayCharacter>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
}
void LCD_displayString(const char *ptr)
{
	uint8 i;
	for (i = 0; ptr[i] != '\0'; i++)
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	8f 5f       	subi	r24, 0xFF	; 255
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	28 2f       	mov	r18, r24
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebe:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	e2 0f       	add	r30, r18
    1ec4:	f3 1f       	adc	r31, r19
    1ec6:	80 81       	ld	r24, Z
    1ec8:	88 23       	and	r24, r24
    1eca:	39 f7       	brne	.-50     	; 0x1e9a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(ptr[i]);
	}
}
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	cf 91       	pop	r28
    1ed4:	df 91       	pop	r29
    1ed6:	08 95       	ret

00001ed8 <LCD_moveCursor>:
void LCD_moveCursor(uint8 row,uint8 col)
{
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	00 d0       	rcall	.+0      	; 0x1ede <LCD_moveCursor+0x6>
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <LCD_moveCursor+0x8>
    1ee0:	0f 92       	push	r0
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	8a 83       	std	Y+2, r24	; 0x02
    1ee8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_adress;

	switch(row)
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	28 2f       	mov	r18, r24
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	3d 83       	std	Y+5, r19	; 0x05
    1ef2:	2c 83       	std	Y+4, r18	; 0x04
    1ef4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef8:	81 30       	cpi	r24, 0x01	; 1
    1efa:	91 05       	cpc	r25, r1
    1efc:	c1 f0       	breq	.+48     	; 0x1f2e <LCD_moveCursor+0x56>
    1efe:	2c 81       	ldd	r18, Y+4	; 0x04
    1f00:	3d 81       	ldd	r19, Y+5	; 0x05
    1f02:	22 30       	cpi	r18, 0x02	; 2
    1f04:	31 05       	cpc	r19, r1
    1f06:	2c f4       	brge	.+10     	; 0x1f12 <LCD_moveCursor+0x3a>
    1f08:	8c 81       	ldd	r24, Y+4	; 0x04
    1f0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	61 f0       	breq	.+24     	; 0x1f28 <LCD_moveCursor+0x50>
    1f10:	19 c0       	rjmp	.+50     	; 0x1f44 <LCD_moveCursor+0x6c>
    1f12:	2c 81       	ldd	r18, Y+4	; 0x04
    1f14:	3d 81       	ldd	r19, Y+5	; 0x05
    1f16:	22 30       	cpi	r18, 0x02	; 2
    1f18:	31 05       	cpc	r19, r1
    1f1a:	69 f0       	breq	.+26     	; 0x1f36 <LCD_moveCursor+0x5e>
    1f1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f20:	83 30       	cpi	r24, 0x03	; 3
    1f22:	91 05       	cpc	r25, r1
    1f24:	61 f0       	breq	.+24     	; 0x1f3e <LCD_moveCursor+0x66>
    1f26:	0e c0       	rjmp	.+28     	; 0x1f44 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_adress = col;
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	89 83       	std	Y+1, r24	; 0x01
    1f2c:	0b c0       	rjmp	.+22     	; 0x1f44 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_adress = col + 0x40;
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	80 5c       	subi	r24, 0xC0	; 192
    1f32:	89 83       	std	Y+1, r24	; 0x01
    1f34:	07 c0       	rjmp	.+14     	; 0x1f44 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_adress = col + 0x10;
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	80 5f       	subi	r24, 0xF0	; 240
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    1f3c:	03 c0       	rjmp	.+6      	; 0x1f44 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_adress = col + 0x50;
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	80 5b       	subi	r24, 0xB0	; 176
    1f42:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(lcd_memory_adress | LCD_SET_CURSOR_LOCATION);
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
    1f46:	80 68       	ori	r24, 0x80	; 128
    1f48:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_sendCommand>

}
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *ptr)
{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	00 d0       	rcall	.+0      	; 0x1f62 <LCD_displayStringRowColumn+0x6>
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <LCD_displayStringRowColumn+0x8>
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	6a 83       	std	Y+2, r22	; 0x02
    1f6c:	5c 83       	std	Y+4, r21	; 0x04
    1f6e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	6a 81       	ldd	r22, Y+2	; 0x02
    1f74:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_moveCursor>
	LCD_displayString(ptr);
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7c:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <LCD_displayString>
}
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <LCD_intgerToString>:
void LCD_intgerToString(int data)
{
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    1f96:	62 97       	sbiw	r28, 0x12	; 18
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	de bf       	out	0x3e, r29	; 62
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	cd bf       	out	0x3d, r28	; 61
    1fa2:	9a 8b       	std	Y+18, r25	; 0x12
    1fa4:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(data,buff,10);
    1fa6:	89 89       	ldd	r24, Y+17	; 0x11
    1fa8:	9a 89       	ldd	r25, Y+18	; 0x12
    1faa:	9e 01       	movw	r18, r28
    1fac:	2f 5f       	subi	r18, 0xFF	; 255
    1fae:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb0:	b9 01       	movw	r22, r18
    1fb2:	4a e0       	ldi	r20, 0x0A	; 10
    1fb4:	50 e0       	ldi	r21, 0x00	; 0
    1fb6:	0e 94 a2 14 	call	0x2944	; 0x2944 <itoa>
	LCD_displayString(buff);
    1fba:	ce 01       	movw	r24, r28
    1fbc:	01 96       	adiw	r24, 0x01	; 1
    1fbe:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <LCD_displayString>
}
    1fc2:	62 96       	adiw	r28, 0x12	; 18
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	08 95       	ret

00001fd4 <LCD_clearScreen>:
void LCD_clearScreen(void)
{
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_sendCommand>
}
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	08 95       	ret

00001fe8 <GPIO_setupPinDirection>:
#include"gpio.h"
#include"common_macros.h"


void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	00 d0       	rcall	.+0      	; 0x1fee <GPIO_setupPinDirection+0x6>
    1fee:	00 d0       	rcall	.+0      	; 0x1ff0 <GPIO_setupPinDirection+0x8>
    1ff0:	0f 92       	push	r0
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	89 83       	std	Y+1, r24	; 0x01
    1ff8:	6a 83       	std	Y+2, r22	; 0x02
    1ffa:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	84 30       	cpi	r24, 0x04	; 4
    2000:	08 f0       	brcs	.+2      	; 0x2004 <GPIO_setupPinDirection+0x1c>
    2002:	d5 c0       	rjmp	.+426    	; 0x21ae <GPIO_setupPinDirection+0x1c6>
    2004:	8a 81       	ldd	r24, Y+2	; 0x02
    2006:	88 30       	cpi	r24, 0x08	; 8
    2008:	08 f0       	brcs	.+2      	; 0x200c <GPIO_setupPinDirection+0x24>
    200a:	d1 c0       	rjmp	.+418    	; 0x21ae <GPIO_setupPinDirection+0x1c6>
	{
		//do nothing
	}
	else
	{
		switch(port_num)
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	3d 83       	std	Y+5, r19	; 0x05
    2014:	2c 83       	std	Y+4, r18	; 0x04
    2016:	8c 81       	ldd	r24, Y+4	; 0x04
    2018:	9d 81       	ldd	r25, Y+5	; 0x05
    201a:	81 30       	cpi	r24, 0x01	; 1
    201c:	91 05       	cpc	r25, r1
    201e:	09 f4       	brne	.+2      	; 0x2022 <GPIO_setupPinDirection+0x3a>
    2020:	43 c0       	rjmp	.+134    	; 0x20a8 <GPIO_setupPinDirection+0xc0>
    2022:	2c 81       	ldd	r18, Y+4	; 0x04
    2024:	3d 81       	ldd	r19, Y+5	; 0x05
    2026:	22 30       	cpi	r18, 0x02	; 2
    2028:	31 05       	cpc	r19, r1
    202a:	2c f4       	brge	.+10     	; 0x2036 <GPIO_setupPinDirection+0x4e>
    202c:	8c 81       	ldd	r24, Y+4	; 0x04
    202e:	9d 81       	ldd	r25, Y+5	; 0x05
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	71 f0       	breq	.+28     	; 0x2050 <GPIO_setupPinDirection+0x68>
    2034:	bc c0       	rjmp	.+376    	; 0x21ae <GPIO_setupPinDirection+0x1c6>
    2036:	2c 81       	ldd	r18, Y+4	; 0x04
    2038:	3d 81       	ldd	r19, Y+5	; 0x05
    203a:	22 30       	cpi	r18, 0x02	; 2
    203c:	31 05       	cpc	r19, r1
    203e:	09 f4       	brne	.+2      	; 0x2042 <GPIO_setupPinDirection+0x5a>
    2040:	5f c0       	rjmp	.+190    	; 0x2100 <GPIO_setupPinDirection+0x118>
    2042:	8c 81       	ldd	r24, Y+4	; 0x04
    2044:	9d 81       	ldd	r25, Y+5	; 0x05
    2046:	83 30       	cpi	r24, 0x03	; 3
    2048:	91 05       	cpc	r25, r1
    204a:	09 f4       	brne	.+2      	; 0x204e <GPIO_setupPinDirection+0x66>
    204c:	85 c0       	rjmp	.+266    	; 0x2158 <GPIO_setupPinDirection+0x170>
    204e:	af c0       	rjmp	.+350    	; 0x21ae <GPIO_setupPinDirection+0x1c6>
		{
		case(PORTA_ID):
				if(direction == PIN_OUTPUT)
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	81 30       	cpi	r24, 0x01	; 1
    2054:	a1 f4       	brne	.+40     	; 0x207e <GPIO_setupPinDirection+0x96>
				{
					SET_BIT(DDRA,pin_num);
    2056:	aa e3       	ldi	r26, 0x3A	; 58
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	ea e3       	ldi	r30, 0x3A	; 58
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	48 2f       	mov	r20, r24
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	28 2f       	mov	r18, r24
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	02 2e       	mov	r0, r18
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <GPIO_setupPinDirection+0x8c>
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	0a 94       	dec	r0
    2076:	e2 f7       	brpl	.-8      	; 0x2070 <GPIO_setupPinDirection+0x88>
    2078:	84 2b       	or	r24, r20
    207a:	8c 93       	st	X, r24
    207c:	98 c0       	rjmp	.+304    	; 0x21ae <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRA,pin_num);
    207e:	aa e3       	ldi	r26, 0x3A	; 58
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	ea e3       	ldi	r30, 0x3A	; 58
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	48 2f       	mov	r20, r24
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	02 2e       	mov	r0, r18
    2096:	02 c0       	rjmp	.+4      	; 0x209c <GPIO_setupPinDirection+0xb4>
    2098:	88 0f       	add	r24, r24
    209a:	99 1f       	adc	r25, r25
    209c:	0a 94       	dec	r0
    209e:	e2 f7       	brpl	.-8      	; 0x2098 <GPIO_setupPinDirection+0xb0>
    20a0:	80 95       	com	r24
    20a2:	84 23       	and	r24, r20
    20a4:	8c 93       	st	X, r24
    20a6:	83 c0       	rjmp	.+262    	; 0x21ae <GPIO_setupPinDirection+0x1c6>
				}
		break;
		case(PORTB_ID):
				if(direction == PIN_OUTPUT)
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	81 30       	cpi	r24, 0x01	; 1
    20ac:	a1 f4       	brne	.+40     	; 0x20d6 <GPIO_setupPinDirection+0xee>
				{
					SET_BIT(DDRB,pin_num);
    20ae:	a7 e3       	ldi	r26, 0x37	; 55
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	e7 e3       	ldi	r30, 0x37	; 55
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	48 2f       	mov	r20, r24
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	02 2e       	mov	r0, r18
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <GPIO_setupPinDirection+0xe4>
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	0a 94       	dec	r0
    20ce:	e2 f7       	brpl	.-8      	; 0x20c8 <GPIO_setupPinDirection+0xe0>
    20d0:	84 2b       	or	r24, r20
    20d2:	8c 93       	st	X, r24
    20d4:	6c c0       	rjmp	.+216    	; 0x21ae <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRB,pin_num);
    20d6:	a7 e3       	ldi	r26, 0x37	; 55
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e7 e3       	ldi	r30, 0x37	; 55
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	48 2f       	mov	r20, r24
    20e2:	8a 81       	ldd	r24, Y+2	; 0x02
    20e4:	28 2f       	mov	r18, r24
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	02 2e       	mov	r0, r18
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <GPIO_setupPinDirection+0x10c>
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	0a 94       	dec	r0
    20f6:	e2 f7       	brpl	.-8      	; 0x20f0 <GPIO_setupPinDirection+0x108>
    20f8:	80 95       	com	r24
    20fa:	84 23       	and	r24, r20
    20fc:	8c 93       	st	X, r24
    20fe:	57 c0       	rjmp	.+174    	; 0x21ae <GPIO_setupPinDirection+0x1c6>
				}
		break;
		case(PORTC_ID):
				if(direction == PIN_OUTPUT)
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	81 30       	cpi	r24, 0x01	; 1
    2104:	a1 f4       	brne	.+40     	; 0x212e <GPIO_setupPinDirection+0x146>
				{
					SET_BIT(DDRC,pin_num);
    2106:	a4 e3       	ldi	r26, 0x34	; 52
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	e4 e3       	ldi	r30, 0x34	; 52
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	48 2f       	mov	r20, r24
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	28 2f       	mov	r18, r24
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	02 2e       	mov	r0, r18
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <GPIO_setupPinDirection+0x13c>
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	0a 94       	dec	r0
    2126:	e2 f7       	brpl	.-8      	; 0x2120 <GPIO_setupPinDirection+0x138>
    2128:	84 2b       	or	r24, r20
    212a:	8c 93       	st	X, r24
    212c:	40 c0       	rjmp	.+128    	; 0x21ae <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRC,pin_num);
    212e:	a4 e3       	ldi	r26, 0x34	; 52
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e4 e3       	ldi	r30, 0x34	; 52
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	48 2f       	mov	r20, r24
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	02 2e       	mov	r0, r18
    2146:	02 c0       	rjmp	.+4      	; 0x214c <GPIO_setupPinDirection+0x164>
    2148:	88 0f       	add	r24, r24
    214a:	99 1f       	adc	r25, r25
    214c:	0a 94       	dec	r0
    214e:	e2 f7       	brpl	.-8      	; 0x2148 <GPIO_setupPinDirection+0x160>
    2150:	80 95       	com	r24
    2152:	84 23       	and	r24, r20
    2154:	8c 93       	st	X, r24
    2156:	2b c0       	rjmp	.+86     	; 0x21ae <GPIO_setupPinDirection+0x1c6>
				}
		break;
		case(PORTD_ID):
				if(direction == PIN_OUTPUT)
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	81 30       	cpi	r24, 0x01	; 1
    215c:	a1 f4       	brne	.+40     	; 0x2186 <GPIO_setupPinDirection+0x19e>
				{
					SET_BIT(DDRD,pin_num);
    215e:	a1 e3       	ldi	r26, 0x31	; 49
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e1 e3       	ldi	r30, 0x31	; 49
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	48 2f       	mov	r20, r24
    216a:	8a 81       	ldd	r24, Y+2	; 0x02
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	02 2e       	mov	r0, r18
    2176:	02 c0       	rjmp	.+4      	; 0x217c <GPIO_setupPinDirection+0x194>
    2178:	88 0f       	add	r24, r24
    217a:	99 1f       	adc	r25, r25
    217c:	0a 94       	dec	r0
    217e:	e2 f7       	brpl	.-8      	; 0x2178 <GPIO_setupPinDirection+0x190>
    2180:	84 2b       	or	r24, r20
    2182:	8c 93       	st	X, r24
    2184:	14 c0       	rjmp	.+40     	; 0x21ae <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRC,pin_num);
    2186:	a4 e3       	ldi	r26, 0x34	; 52
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	e4 e3       	ldi	r30, 0x34	; 52
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	48 2f       	mov	r20, r24
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	28 2f       	mov	r18, r24
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	02 2e       	mov	r0, r18
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <GPIO_setupPinDirection+0x1bc>
    21a0:	88 0f       	add	r24, r24
    21a2:	99 1f       	adc	r25, r25
    21a4:	0a 94       	dec	r0
    21a6:	e2 f7       	brpl	.-8      	; 0x21a0 <GPIO_setupPinDirection+0x1b8>
    21a8:	80 95       	com	r24
    21aa:	84 23       	and	r24, r20
    21ac:	8c 93       	st	X, r24
				}
		break;
		}
	}
}
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	cf 91       	pop	r28
    21ba:	df 91       	pop	r29
    21bc:	08 95       	ret

000021be <GPIO_writePin>:
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    21be:	df 93       	push	r29
    21c0:	cf 93       	push	r28
    21c2:	00 d0       	rcall	.+0      	; 0x21c4 <GPIO_writePin+0x6>
    21c4:	00 d0       	rcall	.+0      	; 0x21c6 <GPIO_writePin+0x8>
    21c6:	0f 92       	push	r0
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	89 83       	std	Y+1, r24	; 0x01
    21ce:	6a 83       	std	Y+2, r22	; 0x02
    21d0:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	84 30       	cpi	r24, 0x04	; 4
    21d6:	08 f0       	brcs	.+2      	; 0x21da <GPIO_writePin+0x1c>
    21d8:	d5 c0       	rjmp	.+426    	; 0x2384 <GPIO_writePin+0x1c6>
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	88 30       	cpi	r24, 0x08	; 8
    21de:	08 f0       	brcs	.+2      	; 0x21e2 <GPIO_writePin+0x24>
    21e0:	d1 c0       	rjmp	.+418    	; 0x2384 <GPIO_writePin+0x1c6>
	{
		//do nothing
	}
	else
	{
		switch(port_num)
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	28 2f       	mov	r18, r24
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	3d 83       	std	Y+5, r19	; 0x05
    21ea:	2c 83       	std	Y+4, r18	; 0x04
    21ec:	8c 81       	ldd	r24, Y+4	; 0x04
    21ee:	9d 81       	ldd	r25, Y+5	; 0x05
    21f0:	81 30       	cpi	r24, 0x01	; 1
    21f2:	91 05       	cpc	r25, r1
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <GPIO_writePin+0x3a>
    21f6:	43 c0       	rjmp	.+134    	; 0x227e <GPIO_writePin+0xc0>
    21f8:	2c 81       	ldd	r18, Y+4	; 0x04
    21fa:	3d 81       	ldd	r19, Y+5	; 0x05
    21fc:	22 30       	cpi	r18, 0x02	; 2
    21fe:	31 05       	cpc	r19, r1
    2200:	2c f4       	brge	.+10     	; 0x220c <GPIO_writePin+0x4e>
    2202:	8c 81       	ldd	r24, Y+4	; 0x04
    2204:	9d 81       	ldd	r25, Y+5	; 0x05
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	71 f0       	breq	.+28     	; 0x2226 <GPIO_writePin+0x68>
    220a:	bc c0       	rjmp	.+376    	; 0x2384 <GPIO_writePin+0x1c6>
    220c:	2c 81       	ldd	r18, Y+4	; 0x04
    220e:	3d 81       	ldd	r19, Y+5	; 0x05
    2210:	22 30       	cpi	r18, 0x02	; 2
    2212:	31 05       	cpc	r19, r1
    2214:	09 f4       	brne	.+2      	; 0x2218 <GPIO_writePin+0x5a>
    2216:	5f c0       	rjmp	.+190    	; 0x22d6 <GPIO_writePin+0x118>
    2218:	8c 81       	ldd	r24, Y+4	; 0x04
    221a:	9d 81       	ldd	r25, Y+5	; 0x05
    221c:	83 30       	cpi	r24, 0x03	; 3
    221e:	91 05       	cpc	r25, r1
    2220:	09 f4       	brne	.+2      	; 0x2224 <GPIO_writePin+0x66>
    2222:	85 c0       	rjmp	.+266    	; 0x232e <GPIO_writePin+0x170>
    2224:	af c0       	rjmp	.+350    	; 0x2384 <GPIO_writePin+0x1c6>
		{
		case(PORTA_ID):
				if(value == LOGIC_HIGH)
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	81 30       	cpi	r24, 0x01	; 1
    222a:	a1 f4       	brne	.+40     	; 0x2254 <GPIO_writePin+0x96>
				{
					SET_BIT(PORTA,pin_num);
    222c:	ab e3       	ldi	r26, 0x3B	; 59
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	eb e3       	ldi	r30, 0x3B	; 59
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	48 2f       	mov	r20, r24
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	02 2e       	mov	r0, r18
    2244:	02 c0       	rjmp	.+4      	; 0x224a <GPIO_writePin+0x8c>
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	0a 94       	dec	r0
    224c:	e2 f7       	brpl	.-8      	; 0x2246 <GPIO_writePin+0x88>
    224e:	84 2b       	or	r24, r20
    2250:	8c 93       	st	X, r24
    2252:	98 c0       	rjmp	.+304    	; 0x2384 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTA,pin_num);
    2254:	ab e3       	ldi	r26, 0x3B	; 59
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	eb e3       	ldi	r30, 0x3B	; 59
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	48 2f       	mov	r20, r24
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	28 2f       	mov	r18, r24
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	02 2e       	mov	r0, r18
    226c:	02 c0       	rjmp	.+4      	; 0x2272 <GPIO_writePin+0xb4>
    226e:	88 0f       	add	r24, r24
    2270:	99 1f       	adc	r25, r25
    2272:	0a 94       	dec	r0
    2274:	e2 f7       	brpl	.-8      	; 0x226e <GPIO_writePin+0xb0>
    2276:	80 95       	com	r24
    2278:	84 23       	and	r24, r20
    227a:	8c 93       	st	X, r24
    227c:	83 c0       	rjmp	.+262    	; 0x2384 <GPIO_writePin+0x1c6>
				}
		break;
		case(PORTB_ID):
				if(value == LOGIC_HIGH)
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	81 30       	cpi	r24, 0x01	; 1
    2282:	a1 f4       	brne	.+40     	; 0x22ac <GPIO_writePin+0xee>
				{
					SET_BIT(PORTB,pin_num);
    2284:	a8 e3       	ldi	r26, 0x38	; 56
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e8 e3       	ldi	r30, 0x38	; 56
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	48 2f       	mov	r20, r24
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	02 2e       	mov	r0, r18
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <GPIO_writePin+0xe4>
    229e:	88 0f       	add	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	0a 94       	dec	r0
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <GPIO_writePin+0xe0>
    22a6:	84 2b       	or	r24, r20
    22a8:	8c 93       	st	X, r24
    22aa:	6c c0       	rjmp	.+216    	; 0x2384 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTB,pin_num);
    22ac:	a8 e3       	ldi	r26, 0x38	; 56
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e8 e3       	ldi	r30, 0x38	; 56
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	48 2f       	mov	r20, r24
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	02 2e       	mov	r0, r18
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <GPIO_writePin+0x10c>
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	0a 94       	dec	r0
    22cc:	e2 f7       	brpl	.-8      	; 0x22c6 <GPIO_writePin+0x108>
    22ce:	80 95       	com	r24
    22d0:	84 23       	and	r24, r20
    22d2:	8c 93       	st	X, r24
    22d4:	57 c0       	rjmp	.+174    	; 0x2384 <GPIO_writePin+0x1c6>
				}
		break;
		case(PORTC_ID):
				if(value == LOGIC_HIGH)
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	81 30       	cpi	r24, 0x01	; 1
    22da:	a1 f4       	brne	.+40     	; 0x2304 <GPIO_writePin+0x146>
				{
					SET_BIT(PORTC,pin_num);
    22dc:	a5 e3       	ldi	r26, 0x35	; 53
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e5 e3       	ldi	r30, 0x35	; 53
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	48 2f       	mov	r20, r24
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	02 2e       	mov	r0, r18
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <GPIO_writePin+0x13c>
    22f6:	88 0f       	add	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	0a 94       	dec	r0
    22fc:	e2 f7       	brpl	.-8      	; 0x22f6 <GPIO_writePin+0x138>
    22fe:	84 2b       	or	r24, r20
    2300:	8c 93       	st	X, r24
    2302:	40 c0       	rjmp	.+128    	; 0x2384 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTC,pin_num);
    2304:	a5 e3       	ldi	r26, 0x35	; 53
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	e5 e3       	ldi	r30, 0x35	; 53
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	48 2f       	mov	r20, r24
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	28 2f       	mov	r18, r24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	02 2e       	mov	r0, r18
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <GPIO_writePin+0x164>
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	0a 94       	dec	r0
    2324:	e2 f7       	brpl	.-8      	; 0x231e <GPIO_writePin+0x160>
    2326:	80 95       	com	r24
    2328:	84 23       	and	r24, r20
    232a:	8c 93       	st	X, r24
    232c:	2b c0       	rjmp	.+86     	; 0x2384 <GPIO_writePin+0x1c6>
				}
		break;
		case(PORTD_ID):
				if(value == LOGIC_HIGH)
    232e:	8b 81       	ldd	r24, Y+3	; 0x03
    2330:	81 30       	cpi	r24, 0x01	; 1
    2332:	a1 f4       	brne	.+40     	; 0x235c <GPIO_writePin+0x19e>
				{
					SET_BIT(PORTD,pin_num);
    2334:	a2 e3       	ldi	r26, 0x32	; 50
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	e2 e3       	ldi	r30, 0x32	; 50
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	48 2f       	mov	r20, r24
    2340:	8a 81       	ldd	r24, Y+2	; 0x02
    2342:	28 2f       	mov	r18, r24
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	02 2e       	mov	r0, r18
    234c:	02 c0       	rjmp	.+4      	; 0x2352 <GPIO_writePin+0x194>
    234e:	88 0f       	add	r24, r24
    2350:	99 1f       	adc	r25, r25
    2352:	0a 94       	dec	r0
    2354:	e2 f7       	brpl	.-8      	; 0x234e <GPIO_writePin+0x190>
    2356:	84 2b       	or	r24, r20
    2358:	8c 93       	st	X, r24
    235a:	14 c0       	rjmp	.+40     	; 0x2384 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTD,pin_num);
    235c:	a2 e3       	ldi	r26, 0x32	; 50
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	e2 e3       	ldi	r30, 0x32	; 50
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	48 2f       	mov	r20, r24
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	02 2e       	mov	r0, r18
    2374:	02 c0       	rjmp	.+4      	; 0x237a <GPIO_writePin+0x1bc>
    2376:	88 0f       	add	r24, r24
    2378:	99 1f       	adc	r25, r25
    237a:	0a 94       	dec	r0
    237c:	e2 f7       	brpl	.-8      	; 0x2376 <GPIO_writePin+0x1b8>
    237e:	80 95       	com	r24
    2380:	84 23       	and	r24, r20
    2382:	8c 93       	st	X, r24
				}
		break;
		}
	}
}
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	08 95       	ret

00002394 <GPIO_readPin>:
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	00 d0       	rcall	.+0      	; 0x239a <GPIO_readPin+0x6>
    239a:	00 d0       	rcall	.+0      	; 0x239c <GPIO_readPin+0x8>
    239c:	0f 92       	push	r0
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
    23a2:	8a 83       	std	Y+2, r24	; 0x02
    23a4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    23a6:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    23a8:	8a 81       	ldd	r24, Y+2	; 0x02
    23aa:	84 30       	cpi	r24, 0x04	; 4
    23ac:	08 f0       	brcs	.+2      	; 0x23b0 <GPIO_readPin+0x1c>
    23ae:	84 c0       	rjmp	.+264    	; 0x24b8 <GPIO_readPin+0x124>
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	88 30       	cpi	r24, 0x08	; 8
    23b4:	08 f0       	brcs	.+2      	; 0x23b8 <GPIO_readPin+0x24>
    23b6:	80 c0       	rjmp	.+256    	; 0x24b8 <GPIO_readPin+0x124>
	{
		//do nothing
	}
	else
	{
		switch(port_num)
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	3d 83       	std	Y+5, r19	; 0x05
    23c0:	2c 83       	std	Y+4, r18	; 0x04
    23c2:	4c 81       	ldd	r20, Y+4	; 0x04
    23c4:	5d 81       	ldd	r21, Y+5	; 0x05
    23c6:	41 30       	cpi	r20, 0x01	; 1
    23c8:	51 05       	cpc	r21, r1
    23ca:	79 f1       	breq	.+94     	; 0x242a <GPIO_readPin+0x96>
    23cc:	8c 81       	ldd	r24, Y+4	; 0x04
    23ce:	9d 81       	ldd	r25, Y+5	; 0x05
    23d0:	82 30       	cpi	r24, 0x02	; 2
    23d2:	91 05       	cpc	r25, r1
    23d4:	34 f4       	brge	.+12     	; 0x23e2 <GPIO_readPin+0x4e>
    23d6:	2c 81       	ldd	r18, Y+4	; 0x04
    23d8:	3d 81       	ldd	r19, Y+5	; 0x05
    23da:	21 15       	cp	r18, r1
    23dc:	31 05       	cpc	r19, r1
    23de:	69 f0       	breq	.+26     	; 0x23fa <GPIO_readPin+0x66>
    23e0:	6b c0       	rjmp	.+214    	; 0x24b8 <GPIO_readPin+0x124>
    23e2:	4c 81       	ldd	r20, Y+4	; 0x04
    23e4:	5d 81       	ldd	r21, Y+5	; 0x05
    23e6:	42 30       	cpi	r20, 0x02	; 2
    23e8:	51 05       	cpc	r21, r1
    23ea:	b9 f1       	breq	.+110    	; 0x245a <GPIO_readPin+0xc6>
    23ec:	8c 81       	ldd	r24, Y+4	; 0x04
    23ee:	9d 81       	ldd	r25, Y+5	; 0x05
    23f0:	83 30       	cpi	r24, 0x03	; 3
    23f2:	91 05       	cpc	r25, r1
    23f4:	09 f4       	brne	.+2      	; 0x23f8 <GPIO_readPin+0x64>
    23f6:	49 c0       	rjmp	.+146    	; 0x248a <GPIO_readPin+0xf6>
    23f8:	5f c0       	rjmp	.+190    	; 0x24b8 <GPIO_readPin+0x124>
		{
		case(PORTA_ID):
				if(BIT_IS_SET(PINA,pin_num))
    23fa:	e9 e3       	ldi	r30, 0x39	; 57
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	28 2f       	mov	r18, r24
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	88 2f       	mov	r24, r24
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	a9 01       	movw	r20, r18
    240c:	02 c0       	rjmp	.+4      	; 0x2412 <GPIO_readPin+0x7e>
    240e:	55 95       	asr	r21
    2410:	47 95       	ror	r20
    2412:	8a 95       	dec	r24
    2414:	e2 f7       	brpl	.-8      	; 0x240e <GPIO_readPin+0x7a>
    2416:	ca 01       	movw	r24, r20
    2418:	81 70       	andi	r24, 0x01	; 1
    241a:	90 70       	andi	r25, 0x00	; 0
    241c:	88 23       	and	r24, r24
    241e:	19 f0       	breq	.+6      	; 0x2426 <GPIO_readPin+0x92>
				{
					pin_value = LOGIC_HIGH;
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	49 c0       	rjmp	.+146    	; 0x24b8 <GPIO_readPin+0x124>
				}
				else
				{
					pin_value = LOGIC_LOW;
    2426:	19 82       	std	Y+1, r1	; 0x01
    2428:	47 c0       	rjmp	.+142    	; 0x24b8 <GPIO_readPin+0x124>
				}
		break;
		case(PORTB_ID):
				if(BIT_IS_SET(PINB,pin_num))
    242a:	e6 e3       	ldi	r30, 0x36	; 54
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	28 2f       	mov	r18, r24
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	88 2f       	mov	r24, r24
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	a9 01       	movw	r20, r18
    243c:	02 c0       	rjmp	.+4      	; 0x2442 <GPIO_readPin+0xae>
    243e:	55 95       	asr	r21
    2440:	47 95       	ror	r20
    2442:	8a 95       	dec	r24
    2444:	e2 f7       	brpl	.-8      	; 0x243e <GPIO_readPin+0xaa>
    2446:	ca 01       	movw	r24, r20
    2448:	81 70       	andi	r24, 0x01	; 1
    244a:	90 70       	andi	r25, 0x00	; 0
    244c:	88 23       	and	r24, r24
    244e:	19 f0       	breq	.+6      	; 0x2456 <GPIO_readPin+0xc2>
				{
					pin_value = LOGIC_HIGH;
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	89 83       	std	Y+1, r24	; 0x01
    2454:	31 c0       	rjmp	.+98     	; 0x24b8 <GPIO_readPin+0x124>
				}
				else
				{
					pin_value = LOGIC_LOW;
    2456:	19 82       	std	Y+1, r1	; 0x01
    2458:	2f c0       	rjmp	.+94     	; 0x24b8 <GPIO_readPin+0x124>
				}
		break;
		case(PORTC_ID):
				if(BIT_IS_SET(PINC,pin_num))
    245a:	e3 e3       	ldi	r30, 0x33	; 51
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	28 2f       	mov	r18, r24
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	88 2f       	mov	r24, r24
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	a9 01       	movw	r20, r18
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <GPIO_readPin+0xde>
    246e:	55 95       	asr	r21
    2470:	47 95       	ror	r20
    2472:	8a 95       	dec	r24
    2474:	e2 f7       	brpl	.-8      	; 0x246e <GPIO_readPin+0xda>
    2476:	ca 01       	movw	r24, r20
    2478:	81 70       	andi	r24, 0x01	; 1
    247a:	90 70       	andi	r25, 0x00	; 0
    247c:	88 23       	and	r24, r24
    247e:	19 f0       	breq	.+6      	; 0x2486 <GPIO_readPin+0xf2>
				{
					pin_value = LOGIC_HIGH;
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	89 83       	std	Y+1, r24	; 0x01
    2484:	19 c0       	rjmp	.+50     	; 0x24b8 <GPIO_readPin+0x124>
				}
				else
				{
					pin_value = LOGIC_LOW;
    2486:	19 82       	std	Y+1, r1	; 0x01
    2488:	17 c0       	rjmp	.+46     	; 0x24b8 <GPIO_readPin+0x124>
				}
		break;
		case(PORTD_ID):
				if(BIT_IS_SET(PIND,pin_num))
    248a:	e0 e3       	ldi	r30, 0x30	; 48
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	80 81       	ld	r24, Z
    2490:	28 2f       	mov	r18, r24
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	88 2f       	mov	r24, r24
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	a9 01       	movw	r20, r18
    249c:	02 c0       	rjmp	.+4      	; 0x24a2 <GPIO_readPin+0x10e>
    249e:	55 95       	asr	r21
    24a0:	47 95       	ror	r20
    24a2:	8a 95       	dec	r24
    24a4:	e2 f7       	brpl	.-8      	; 0x249e <GPIO_readPin+0x10a>
    24a6:	ca 01       	movw	r24, r20
    24a8:	81 70       	andi	r24, 0x01	; 1
    24aa:	90 70       	andi	r25, 0x00	; 0
    24ac:	88 23       	and	r24, r24
    24ae:	19 f0       	breq	.+6      	; 0x24b6 <GPIO_readPin+0x122>
				{
					pin_value = LOGIC_HIGH;
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	89 83       	std	Y+1, r24	; 0x01
    24b4:	01 c0       	rjmp	.+2      	; 0x24b8 <GPIO_readPin+0x124>
				}
				else
				{
					pin_value = LOGIC_LOW;
    24b6:	19 82       	std	Y+1, r1	; 0x01
				}
		break;
		}
	}
	return pin_value;
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	0f 90       	pop	r0
    24c0:	0f 90       	pop	r0
    24c2:	0f 90       	pop	r0
    24c4:	cf 91       	pop	r28
    24c6:	df 91       	pop	r29
    24c8:	08 95       	ret

000024ca <GPIO_setupPortDirection>:
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    24ca:	df 93       	push	r29
    24cc:	cf 93       	push	r28
    24ce:	00 d0       	rcall	.+0      	; 0x24d0 <GPIO_setupPortDirection+0x6>
    24d0:	00 d0       	rcall	.+0      	; 0x24d2 <GPIO_setupPortDirection+0x8>
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
    24d6:	89 83       	std	Y+1, r24	; 0x01
    24d8:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	84 30       	cpi	r24, 0x04	; 4
    24de:	90 f5       	brcc	.+100    	; 0x2544 <GPIO_setupPortDirection+0x7a>
	{
		//do nothing
	}
	else
	{
		switch(port_num)
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	28 2f       	mov	r18, r24
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	3c 83       	std	Y+4, r19	; 0x04
    24e8:	2b 83       	std	Y+3, r18	; 0x03
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	9c 81       	ldd	r25, Y+4	; 0x04
    24ee:	81 30       	cpi	r24, 0x01	; 1
    24f0:	91 05       	cpc	r25, r1
    24f2:	d1 f0       	breq	.+52     	; 0x2528 <GPIO_setupPortDirection+0x5e>
    24f4:	2b 81       	ldd	r18, Y+3	; 0x03
    24f6:	3c 81       	ldd	r19, Y+4	; 0x04
    24f8:	22 30       	cpi	r18, 0x02	; 2
    24fa:	31 05       	cpc	r19, r1
    24fc:	2c f4       	brge	.+10     	; 0x2508 <GPIO_setupPortDirection+0x3e>
    24fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2500:	9c 81       	ldd	r25, Y+4	; 0x04
    2502:	00 97       	sbiw	r24, 0x00	; 0
    2504:	61 f0       	breq	.+24     	; 0x251e <GPIO_setupPortDirection+0x54>
    2506:	1e c0       	rjmp	.+60     	; 0x2544 <GPIO_setupPortDirection+0x7a>
    2508:	2b 81       	ldd	r18, Y+3	; 0x03
    250a:	3c 81       	ldd	r19, Y+4	; 0x04
    250c:	22 30       	cpi	r18, 0x02	; 2
    250e:	31 05       	cpc	r19, r1
    2510:	81 f0       	breq	.+32     	; 0x2532 <GPIO_setupPortDirection+0x68>
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	9c 81       	ldd	r25, Y+4	; 0x04
    2516:	83 30       	cpi	r24, 0x03	; 3
    2518:	91 05       	cpc	r25, r1
    251a:	81 f0       	breq	.+32     	; 0x253c <GPIO_setupPortDirection+0x72>
    251c:	13 c0       	rjmp	.+38     	; 0x2544 <GPIO_setupPortDirection+0x7a>
		{
		case(PORTA_ID):
		DDRA = direction;
    251e:	ea e3       	ldi	r30, 0x3A	; 58
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	8a 81       	ldd	r24, Y+2	; 0x02
    2524:	80 83       	st	Z, r24
    2526:	0e c0       	rjmp	.+28     	; 0x2544 <GPIO_setupPortDirection+0x7a>
		break;
		case(PORTB_ID):
		DDRB = direction;
    2528:	e7 e3       	ldi	r30, 0x37	; 55
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	8a 81       	ldd	r24, Y+2	; 0x02
    252e:	80 83       	st	Z, r24
    2530:	09 c0       	rjmp	.+18     	; 0x2544 <GPIO_setupPortDirection+0x7a>
		break;
		case(PORTC_ID):
		DDRC = direction;
    2532:	e4 e3       	ldi	r30, 0x34	; 52
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	80 83       	st	Z, r24
    253a:	04 c0       	rjmp	.+8      	; 0x2544 <GPIO_setupPortDirection+0x7a>
		break;
		case(PORTD_ID):
		DDRD = direction;
    253c:	e1 e3       	ldi	r30, 0x31	; 49
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	8a 81       	ldd	r24, Y+2	; 0x02
    2542:	80 83       	st	Z, r24
		break;
		}
	}
}
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	cf 91       	pop	r28
    254e:	df 91       	pop	r29
    2550:	08 95       	ret

00002552 <GPIO_writePort>:
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2552:	df 93       	push	r29
    2554:	cf 93       	push	r28
    2556:	00 d0       	rcall	.+0      	; 0x2558 <GPIO_writePort+0x6>
    2558:	00 d0       	rcall	.+0      	; 0x255a <GPIO_writePort+0x8>
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	89 83       	std	Y+1, r24	; 0x01
    2560:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	84 30       	cpi	r24, 0x04	; 4
    2566:	90 f5       	brcc	.+100    	; 0x25cc <GPIO_writePort+0x7a>
	{
		//do nothing
	}
	else
	{
		switch(port_num)
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	3c 83       	std	Y+4, r19	; 0x04
    2570:	2b 83       	std	Y+3, r18	; 0x03
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
    2574:	9c 81       	ldd	r25, Y+4	; 0x04
    2576:	81 30       	cpi	r24, 0x01	; 1
    2578:	91 05       	cpc	r25, r1
    257a:	d1 f0       	breq	.+52     	; 0x25b0 <GPIO_writePort+0x5e>
    257c:	2b 81       	ldd	r18, Y+3	; 0x03
    257e:	3c 81       	ldd	r19, Y+4	; 0x04
    2580:	22 30       	cpi	r18, 0x02	; 2
    2582:	31 05       	cpc	r19, r1
    2584:	2c f4       	brge	.+10     	; 0x2590 <GPIO_writePort+0x3e>
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	9c 81       	ldd	r25, Y+4	; 0x04
    258a:	00 97       	sbiw	r24, 0x00	; 0
    258c:	61 f0       	breq	.+24     	; 0x25a6 <GPIO_writePort+0x54>
    258e:	1e c0       	rjmp	.+60     	; 0x25cc <GPIO_writePort+0x7a>
    2590:	2b 81       	ldd	r18, Y+3	; 0x03
    2592:	3c 81       	ldd	r19, Y+4	; 0x04
    2594:	22 30       	cpi	r18, 0x02	; 2
    2596:	31 05       	cpc	r19, r1
    2598:	81 f0       	breq	.+32     	; 0x25ba <GPIO_writePort+0x68>
    259a:	8b 81       	ldd	r24, Y+3	; 0x03
    259c:	9c 81       	ldd	r25, Y+4	; 0x04
    259e:	83 30       	cpi	r24, 0x03	; 3
    25a0:	91 05       	cpc	r25, r1
    25a2:	81 f0       	breq	.+32     	; 0x25c4 <GPIO_writePort+0x72>
    25a4:	13 c0       	rjmp	.+38     	; 0x25cc <GPIO_writePort+0x7a>
		{
		case(PORTA_ID):
		PORTA = value;
    25a6:	eb e3       	ldi	r30, 0x3B	; 59
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
    25ac:	80 83       	st	Z, r24
    25ae:	0e c0       	rjmp	.+28     	; 0x25cc <GPIO_writePort+0x7a>
		break;
		case(PORTB_ID):
		PORTB = value;
    25b0:	e8 e3       	ldi	r30, 0x38	; 56
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	8a 81       	ldd	r24, Y+2	; 0x02
    25b6:	80 83       	st	Z, r24
    25b8:	09 c0       	rjmp	.+18     	; 0x25cc <GPIO_writePort+0x7a>
		break;
		case(PORTC_ID):
		PORTC = value;
    25ba:	e5 e3       	ldi	r30, 0x35	; 53
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	8a 81       	ldd	r24, Y+2	; 0x02
    25c0:	80 83       	st	Z, r24
    25c2:	04 c0       	rjmp	.+8      	; 0x25cc <GPIO_writePort+0x7a>
		break;
		case(PORTD_ID):
		PORTD = value;
    25c4:	e2 e3       	ldi	r30, 0x32	; 50
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ca:	80 83       	st	Z, r24
		break;
		}
	}
}
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	cf 91       	pop	r28
    25d6:	df 91       	pop	r29
    25d8:	08 95       	ret

000025da <GPIO_readPort>:
uint8 GPIO_readPort(uint8 port_num)
{
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	00 d0       	rcall	.+0      	; 0x25e0 <GPIO_readPort+0x6>
    25e0:	00 d0       	rcall	.+0      	; 0x25e2 <GPIO_readPort+0x8>
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62
    25e6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = 0;
    25e8:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	84 30       	cpi	r24, 0x04	; 4
    25ee:	90 f5       	brcc	.+100    	; 0x2654 <GPIO_readPort+0x7a>
	{
		//do nothing
	}
	else
	{
		switch(port_num)
    25f0:	8a 81       	ldd	r24, Y+2	; 0x02
    25f2:	28 2f       	mov	r18, r24
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	3c 83       	std	Y+4, r19	; 0x04
    25f8:	2b 83       	std	Y+3, r18	; 0x03
    25fa:	8b 81       	ldd	r24, Y+3	; 0x03
    25fc:	9c 81       	ldd	r25, Y+4	; 0x04
    25fe:	81 30       	cpi	r24, 0x01	; 1
    2600:	91 05       	cpc	r25, r1
    2602:	d1 f0       	breq	.+52     	; 0x2638 <GPIO_readPort+0x5e>
    2604:	2b 81       	ldd	r18, Y+3	; 0x03
    2606:	3c 81       	ldd	r19, Y+4	; 0x04
    2608:	22 30       	cpi	r18, 0x02	; 2
    260a:	31 05       	cpc	r19, r1
    260c:	2c f4       	brge	.+10     	; 0x2618 <GPIO_readPort+0x3e>
    260e:	8b 81       	ldd	r24, Y+3	; 0x03
    2610:	9c 81       	ldd	r25, Y+4	; 0x04
    2612:	00 97       	sbiw	r24, 0x00	; 0
    2614:	61 f0       	breq	.+24     	; 0x262e <GPIO_readPort+0x54>
    2616:	1e c0       	rjmp	.+60     	; 0x2654 <GPIO_readPort+0x7a>
    2618:	2b 81       	ldd	r18, Y+3	; 0x03
    261a:	3c 81       	ldd	r19, Y+4	; 0x04
    261c:	22 30       	cpi	r18, 0x02	; 2
    261e:	31 05       	cpc	r19, r1
    2620:	81 f0       	breq	.+32     	; 0x2642 <GPIO_readPort+0x68>
    2622:	8b 81       	ldd	r24, Y+3	; 0x03
    2624:	9c 81       	ldd	r25, Y+4	; 0x04
    2626:	83 30       	cpi	r24, 0x03	; 3
    2628:	91 05       	cpc	r25, r1
    262a:	81 f0       	breq	.+32     	; 0x264c <GPIO_readPort+0x72>
    262c:	13 c0       	rjmp	.+38     	; 0x2654 <GPIO_readPort+0x7a>
		{
		case(PORTA_ID):
		value = PINA;
    262e:	e9 e3       	ldi	r30, 0x39	; 57
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	89 83       	std	Y+1, r24	; 0x01
    2636:	0e c0       	rjmp	.+28     	; 0x2654 <GPIO_readPort+0x7a>
		break;
		case(PORTB_ID):
		value = PINB;
    2638:	e6 e3       	ldi	r30, 0x36	; 54
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	80 81       	ld	r24, Z
    263e:	89 83       	std	Y+1, r24	; 0x01
    2640:	09 c0       	rjmp	.+18     	; 0x2654 <GPIO_readPort+0x7a>
		break;
		case(PORTC_ID):
		value = PINC;
    2642:	e3 e3       	ldi	r30, 0x33	; 51
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	80 81       	ld	r24, Z
    2648:	89 83       	std	Y+1, r24	; 0x01
    264a:	04 c0       	rjmp	.+8      	; 0x2654 <GPIO_readPort+0x7a>
		break;
		case(PORTD_ID):
		value = PIND;
    264c:	e0 e3       	ldi	r30, 0x30	; 48
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	89 83       	std	Y+1, r24	; 0x01
		break;
		}
	}
	return value;
    2654:	89 81       	ldd	r24, Y+1	; 0x01
}
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	cf 91       	pop	r28
    2660:	df 91       	pop	r29
    2662:	08 95       	ret

00002664 <main>:
 */
#include "LCD_DRIVER1.h"
#include "uart.h"

int main(void)
{
    2664:	df 93       	push	r29
    2666:	cf 93       	push	r28
    2668:	0f 92       	push	r0
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
	uint8 received_key;

	LCD_init();
    266e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_init>
	UART_init(9600);
    2672:	60 e8       	ldi	r22, 0x80	; 128
    2674:	75 e2       	ldi	r23, 0x25	; 37
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	0e 94 4f 13 	call	0x269e	; 0x269e <UART_init>

	while(1)
	{
		received_key = UART_recieveByte();
    267e:	0e 94 ce 13 	call	0x279c	; 0x279c <UART_recieveByte>
    2682:	89 83       	std	Y+1, r24	; 0x01

		if((received_key <= 9) && (received_key >= 0))
    2684:	89 81       	ldd	r24, Y+1	; 0x01
    2686:	8a 30       	cpi	r24, 0x0A	; 10
    2688:	30 f4       	brcc	.+12     	; 0x2696 <main+0x32>
		{
			LCD_intgerToString(received_key);
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	88 2f       	mov	r24, r24
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <LCD_intgerToString>
    2694:	f4 cf       	rjmp	.-24     	; 0x267e <main+0x1a>
		}
		else
		{
			LCD_displayCharacter(received_key);
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD_displayCharacter>
    269c:	f0 cf       	rjmp	.-32     	; 0x267e <main+0x1a>

0000269e <UART_init>:
#include "uart.h"
#include "avr/io.h" /* To use the UART Registers */
#include "common_macros.h" /* To use the macros like SET_BIT */

void UART_init(uint32 baud_rate)
{
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	00 d0       	rcall	.+0      	; 0x26a4 <UART_init+0x6>
    26a4:	00 d0       	rcall	.+0      	; 0x26a6 <UART_init+0x8>
    26a6:	00 d0       	rcall	.+0      	; 0x26a8 <UART_init+0xa>
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
    26ac:	6b 83       	std	Y+3, r22	; 0x03
    26ae:	7c 83       	std	Y+4, r23	; 0x04
    26b0:	8d 83       	std	Y+5, r24	; 0x05
    26b2:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value;

	SET_BIT(UCSRA,U2X);  //UCSRA (double transmition speed)
    26b4:	ab e2       	ldi	r26, 0x2B	; 43
    26b6:	b0 e0       	ldi	r27, 0x00	; 0
    26b8:	eb e2       	ldi	r30, 0x2B	; 43
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	80 81       	ld	r24, Z
    26be:	82 60       	ori	r24, 0x02	; 2
    26c0:	8c 93       	st	X, r24

	SET_BIT(UCSRB,RXEN); //UCSRB (enable reciever and transmitter)
    26c2:	aa e2       	ldi	r26, 0x2A	; 42
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	ea e2       	ldi	r30, 0x2A	; 42
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	80 61       	ori	r24, 0x10	; 16
    26ce:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    26d0:	aa e2       	ldi	r26, 0x2A	; 42
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	ea e2       	ldi	r30, 0x2A	; 42
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 81       	ld	r24, Z
    26da:	88 60       	ori	r24, 0x08	; 8
    26dc:	8c 93       	st	X, r24

	SET_BIT(UCSRC,URSEL); // UCSRC(enable the register,8-bit char,1-bit stop,disable parity)
    26de:	a0 e4       	ldi	r26, 0x40	; 64
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	e0 e4       	ldi	r30, 0x40	; 64
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	80 68       	ori	r24, 0x80	; 128
    26ea:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCSZ0);
    26ec:	a0 e4       	ldi	r26, 0x40	; 64
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	e0 e4       	ldi	r30, 0x40	; 64
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
    26f6:	82 60       	ori	r24, 0x02	; 2
    26f8:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCSZ1);
    26fa:	a0 e4       	ldi	r26, 0x40	; 64
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	e0 e4       	ldi	r30, 0x40	; 64
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	84 60       	ori	r24, 0x04	; 4
    2706:	8c 93       	st	X, r24

	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    2708:	8b 81       	ldd	r24, Y+3	; 0x03
    270a:	9c 81       	ldd	r25, Y+4	; 0x04
    270c:	ad 81       	ldd	r26, Y+5	; 0x05
    270e:	be 81       	ldd	r27, Y+6	; 0x06
    2710:	88 0f       	add	r24, r24
    2712:	99 1f       	adc	r25, r25
    2714:	aa 1f       	adc	r26, r26
    2716:	bb 1f       	adc	r27, r27
    2718:	88 0f       	add	r24, r24
    271a:	99 1f       	adc	r25, r25
    271c:	aa 1f       	adc	r26, r26
    271e:	bb 1f       	adc	r27, r27
    2720:	88 0f       	add	r24, r24
    2722:	99 1f       	adc	r25, r25
    2724:	aa 1f       	adc	r26, r26
    2726:	bb 1f       	adc	r27, r27
    2728:	9c 01       	movw	r18, r24
    272a:	ad 01       	movw	r20, r26
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	94 e2       	ldi	r25, 0x24	; 36
    2730:	a4 ef       	ldi	r26, 0xF4	; 244
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	bc 01       	movw	r22, r24
    2736:	cd 01       	movw	r24, r26
    2738:	0e 94 49 14 	call	0x2892	; 0x2892 <__udivmodsi4>
    273c:	da 01       	movw	r26, r20
    273e:	c9 01       	movw	r24, r18
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	9a 83       	std	Y+2, r25	; 0x02
    2744:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = ubrr_value>>8;
    2746:	e0 e4       	ldi	r30, 0x40	; 64
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	9a 81       	ldd	r25, Y+2	; 0x02
    274e:	89 2f       	mov	r24, r25
    2750:	99 27       	eor	r25, r25
    2752:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2754:	e9 e2       	ldi	r30, 0x29	; 41
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	80 83       	st	Z, r24

}
    275c:	26 96       	adiw	r28, 0x06	; 6
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	f8 94       	cli
    2762:	de bf       	out	0x3e, r29	; 62
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	cd bf       	out	0x3d, r28	; 61
    2768:	cf 91       	pop	r28
    276a:	df 91       	pop	r29
    276c:	08 95       	ret

0000276e <UART_sendByte>:
void UART_sendByte(const uint8 data)
{
    276e:	df 93       	push	r29
    2770:	cf 93       	push	r28
    2772:	0f 92       	push	r0
    2774:	cd b7       	in	r28, 0x3d	; 61
    2776:	de b7       	in	r29, 0x3e	; 62
    2778:	89 83       	std	Y+1, r24	; 0x01
	 * UDR = data;
	 * while(BIT_IS_CLEAR(UCSRA,TXC)){}
	 * SET_BIT(UCSRA,TXC);
	 */

	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    277a:	eb e2       	ldi	r30, 0x2B	; 43
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	88 2f       	mov	r24, r24
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	80 72       	andi	r24, 0x20	; 32
    2786:	90 70       	andi	r25, 0x00	; 0
    2788:	00 97       	sbiw	r24, 0x00	; 0
    278a:	b9 f3       	breq	.-18     	; 0x277a <UART_sendByte+0xc>
	/*
	 * (when UDR register not empty the flag iscleared)
	 is better  i will send the data and immediately det out when i call it again i would have finiched some codes
	 */
	UDR = data;
    278c:	ec e2       	ldi	r30, 0x2C	; 44
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	80 83       	st	Z, r24
}
    2794:	0f 90       	pop	r0
    2796:	cf 91       	pop	r28
    2798:	df 91       	pop	r29
    279a:	08 95       	ret

0000279c <UART_recieveByte>:
uint8 UART_recieveByte(void)
{
    279c:	df 93       	push	r29
    279e:	cf 93       	push	r28
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    27a4:	eb e2       	ldi	r30, 0x2B	; 43
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	88 23       	and	r24, r24
    27ac:	dc f7       	brge	.-10     	; 0x27a4 <UART_recieveByte+0x8>

		return UDR; //(once UDR register is filled the flag will be cleared)
    27ae:	ec e2       	ldi	r30, 0x2C	; 44
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
}
    27b4:	cf 91       	pop	r28
    27b6:	df 91       	pop	r29
    27b8:	08 95       	ret

000027ba <UART_sendString>:
void UART_sendString(const uint8 *Str)
{
    27ba:	df 93       	push	r29
    27bc:	cf 93       	push	r28
    27be:	00 d0       	rcall	.+0      	; 0x27c0 <UART_sendString+0x6>
    27c0:	0f 92       	push	r0
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
    27c6:	9b 83       	std	Y+3, r25	; 0x03
    27c8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    27ca:	19 82       	std	Y+1, r1	; 0x01
    27cc:	0e c0       	rjmp	.+28     	; 0x27ea <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	28 2f       	mov	r18, r24
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	8a 81       	ldd	r24, Y+2	; 0x02
    27d6:	9b 81       	ldd	r25, Y+3	; 0x03
    27d8:	fc 01       	movw	r30, r24
    27da:	e2 0f       	add	r30, r18
    27dc:	f3 1f       	adc	r31, r19
    27de:	80 81       	ld	r24, Z
    27e0:	0e 94 b7 13 	call	0x276e	; 0x276e <UART_sendByte>
		i++;
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	8f 5f       	subi	r24, 0xFF	; 255
    27e8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	28 2f       	mov	r18, r24
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	8a 81       	ldd	r24, Y+2	; 0x02
    27f2:	9b 81       	ldd	r25, Y+3	; 0x03
    27f4:	fc 01       	movw	r30, r24
    27f6:	e2 0f       	add	r30, r18
    27f8:	f3 1f       	adc	r31, r19
    27fa:	80 81       	ld	r24, Z
    27fc:	88 23       	and	r24, r24
    27fe:	39 f7       	brne	.-50     	; 0x27ce <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	cf 91       	pop	r28
    2808:	df 91       	pop	r29
    280a:	08 95       	ret

0000280c <UART_receiveString>:
void UART_receiveString(uint8 *Str)
{
    280c:	0f 93       	push	r16
    280e:	1f 93       	push	r17
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	00 d0       	rcall	.+0      	; 0x2816 <UART_receiveString+0xa>
    2816:	0f 92       	push	r0
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
    281c:	9b 83       	std	Y+3, r25	; 0x03
    281e:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    2820:	19 82       	std	Y+1, r1	; 0x01

	//Receive the first byte
	Str[i] = UART_recieveByte();
    2822:	89 81       	ldd	r24, Y+1	; 0x01
    2824:	28 2f       	mov	r18, r24
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	8a 81       	ldd	r24, Y+2	; 0x02
    282a:	9b 81       	ldd	r25, Y+3	; 0x03
    282c:	8c 01       	movw	r16, r24
    282e:	02 0f       	add	r16, r18
    2830:	13 1f       	adc	r17, r19
    2832:	0e 94 ce 13 	call	0x279c	; 0x279c <UART_recieveByte>
    2836:	f8 01       	movw	r30, r16
    2838:	80 83       	st	Z, r24
    283a:	0f c0       	rjmp	.+30     	; 0x285a <UART_receiveString+0x4e>

	// Receive the whole string until the '#'
	while(Str[i] != '#')
	{
		i++;
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	8f 5f       	subi	r24, 0xFF	; 255
    2840:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	28 2f       	mov	r18, r24
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	8a 81       	ldd	r24, Y+2	; 0x02
    284a:	9b 81       	ldd	r25, Y+3	; 0x03
    284c:	8c 01       	movw	r16, r24
    284e:	02 0f       	add	r16, r18
    2850:	13 1f       	adc	r17, r19
    2852:	0e 94 ce 13 	call	0x279c	; 0x279c <UART_recieveByte>
    2856:	f8 01       	movw	r30, r16
    2858:	80 83       	st	Z, r24

	//Receive the first byte
	Str[i] = UART_recieveByte();

	// Receive the whole string until the '#'
	while(Str[i] != '#')
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	28 2f       	mov	r18, r24
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	9b 81       	ldd	r25, Y+3	; 0x03
    2864:	fc 01       	movw	r30, r24
    2866:	e2 0f       	add	r30, r18
    2868:	f3 1f       	adc	r31, r19
    286a:	80 81       	ld	r24, Z
    286c:	83 32       	cpi	r24, 0x23	; 35
    286e:	31 f7       	brne	.-52     	; 0x283c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	// After receiving the whole string plus the '#', replace the '#' with '\0'
	Str[i] = '\0';
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	28 2f       	mov	r18, r24
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	8a 81       	ldd	r24, Y+2	; 0x02
    2878:	9b 81       	ldd	r25, Y+3	; 0x03
    287a:	fc 01       	movw	r30, r24
    287c:	e2 0f       	add	r30, r18
    287e:	f3 1f       	adc	r31, r19
    2880:	10 82       	st	Z, r1
}
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	0f 90       	pop	r0
    2888:	cf 91       	pop	r28
    288a:	df 91       	pop	r29
    288c:	1f 91       	pop	r17
    288e:	0f 91       	pop	r16
    2890:	08 95       	ret

00002892 <__udivmodsi4>:
    2892:	a1 e2       	ldi	r26, 0x21	; 33
    2894:	1a 2e       	mov	r1, r26
    2896:	aa 1b       	sub	r26, r26
    2898:	bb 1b       	sub	r27, r27
    289a:	fd 01       	movw	r30, r26
    289c:	0d c0       	rjmp	.+26     	; 0x28b8 <__udivmodsi4_ep>

0000289e <__udivmodsi4_loop>:
    289e:	aa 1f       	adc	r26, r26
    28a0:	bb 1f       	adc	r27, r27
    28a2:	ee 1f       	adc	r30, r30
    28a4:	ff 1f       	adc	r31, r31
    28a6:	a2 17       	cp	r26, r18
    28a8:	b3 07       	cpc	r27, r19
    28aa:	e4 07       	cpc	r30, r20
    28ac:	f5 07       	cpc	r31, r21
    28ae:	20 f0       	brcs	.+8      	; 0x28b8 <__udivmodsi4_ep>
    28b0:	a2 1b       	sub	r26, r18
    28b2:	b3 0b       	sbc	r27, r19
    28b4:	e4 0b       	sbc	r30, r20
    28b6:	f5 0b       	sbc	r31, r21

000028b8 <__udivmodsi4_ep>:
    28b8:	66 1f       	adc	r22, r22
    28ba:	77 1f       	adc	r23, r23
    28bc:	88 1f       	adc	r24, r24
    28be:	99 1f       	adc	r25, r25
    28c0:	1a 94       	dec	r1
    28c2:	69 f7       	brne	.-38     	; 0x289e <__udivmodsi4_loop>
    28c4:	60 95       	com	r22
    28c6:	70 95       	com	r23
    28c8:	80 95       	com	r24
    28ca:	90 95       	com	r25
    28cc:	9b 01       	movw	r18, r22
    28ce:	ac 01       	movw	r20, r24
    28d0:	bd 01       	movw	r22, r26
    28d2:	cf 01       	movw	r24, r30
    28d4:	08 95       	ret

000028d6 <__prologue_saves__>:
    28d6:	2f 92       	push	r2
    28d8:	3f 92       	push	r3
    28da:	4f 92       	push	r4
    28dc:	5f 92       	push	r5
    28de:	6f 92       	push	r6
    28e0:	7f 92       	push	r7
    28e2:	8f 92       	push	r8
    28e4:	9f 92       	push	r9
    28e6:	af 92       	push	r10
    28e8:	bf 92       	push	r11
    28ea:	cf 92       	push	r12
    28ec:	df 92       	push	r13
    28ee:	ef 92       	push	r14
    28f0:	ff 92       	push	r15
    28f2:	0f 93       	push	r16
    28f4:	1f 93       	push	r17
    28f6:	cf 93       	push	r28
    28f8:	df 93       	push	r29
    28fa:	cd b7       	in	r28, 0x3d	; 61
    28fc:	de b7       	in	r29, 0x3e	; 62
    28fe:	ca 1b       	sub	r28, r26
    2900:	db 0b       	sbc	r29, r27
    2902:	0f b6       	in	r0, 0x3f	; 63
    2904:	f8 94       	cli
    2906:	de bf       	out	0x3e, r29	; 62
    2908:	0f be       	out	0x3f, r0	; 63
    290a:	cd bf       	out	0x3d, r28	; 61
    290c:	09 94       	ijmp

0000290e <__epilogue_restores__>:
    290e:	2a 88       	ldd	r2, Y+18	; 0x12
    2910:	39 88       	ldd	r3, Y+17	; 0x11
    2912:	48 88       	ldd	r4, Y+16	; 0x10
    2914:	5f 84       	ldd	r5, Y+15	; 0x0f
    2916:	6e 84       	ldd	r6, Y+14	; 0x0e
    2918:	7d 84       	ldd	r7, Y+13	; 0x0d
    291a:	8c 84       	ldd	r8, Y+12	; 0x0c
    291c:	9b 84       	ldd	r9, Y+11	; 0x0b
    291e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2920:	b9 84       	ldd	r11, Y+9	; 0x09
    2922:	c8 84       	ldd	r12, Y+8	; 0x08
    2924:	df 80       	ldd	r13, Y+7	; 0x07
    2926:	ee 80       	ldd	r14, Y+6	; 0x06
    2928:	fd 80       	ldd	r15, Y+5	; 0x05
    292a:	0c 81       	ldd	r16, Y+4	; 0x04
    292c:	1b 81       	ldd	r17, Y+3	; 0x03
    292e:	aa 81       	ldd	r26, Y+2	; 0x02
    2930:	b9 81       	ldd	r27, Y+1	; 0x01
    2932:	ce 0f       	add	r28, r30
    2934:	d1 1d       	adc	r29, r1
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	f8 94       	cli
    293a:	de bf       	out	0x3e, r29	; 62
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	cd bf       	out	0x3d, r28	; 61
    2940:	ed 01       	movw	r28, r26
    2942:	08 95       	ret

00002944 <itoa>:
    2944:	fb 01       	movw	r30, r22
    2946:	9f 01       	movw	r18, r30
    2948:	e8 94       	clt
    294a:	42 30       	cpi	r20, 0x02	; 2
    294c:	c4 f0       	brlt	.+48     	; 0x297e <itoa+0x3a>
    294e:	45 32       	cpi	r20, 0x25	; 37
    2950:	b4 f4       	brge	.+44     	; 0x297e <itoa+0x3a>
    2952:	4a 30       	cpi	r20, 0x0A	; 10
    2954:	29 f4       	brne	.+10     	; 0x2960 <itoa+0x1c>
    2956:	97 fb       	bst	r25, 7
    2958:	1e f4       	brtc	.+6      	; 0x2960 <itoa+0x1c>
    295a:	90 95       	com	r25
    295c:	81 95       	neg	r24
    295e:	9f 4f       	sbci	r25, 0xFF	; 255
    2960:	64 2f       	mov	r22, r20
    2962:	77 27       	eor	r23, r23
    2964:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__udivmodhi4>
    2968:	80 5d       	subi	r24, 0xD0	; 208
    296a:	8a 33       	cpi	r24, 0x3A	; 58
    296c:	0c f0       	brlt	.+2      	; 0x2970 <itoa+0x2c>
    296e:	89 5d       	subi	r24, 0xD9	; 217
    2970:	81 93       	st	Z+, r24
    2972:	cb 01       	movw	r24, r22
    2974:	00 97       	sbiw	r24, 0x00	; 0
    2976:	a1 f7       	brne	.-24     	; 0x2960 <itoa+0x1c>
    2978:	16 f4       	brtc	.+4      	; 0x297e <itoa+0x3a>
    297a:	5d e2       	ldi	r21, 0x2D	; 45
    297c:	51 93       	st	Z+, r21
    297e:	10 82       	st	Z, r1
    2980:	c9 01       	movw	r24, r18
    2982:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <strrev>

00002986 <strrev>:
    2986:	dc 01       	movw	r26, r24
    2988:	fc 01       	movw	r30, r24
    298a:	67 2f       	mov	r22, r23
    298c:	71 91       	ld	r23, Z+
    298e:	77 23       	and	r23, r23
    2990:	e1 f7       	brne	.-8      	; 0x298a <strrev+0x4>
    2992:	32 97       	sbiw	r30, 0x02	; 2
    2994:	04 c0       	rjmp	.+8      	; 0x299e <strrev+0x18>
    2996:	7c 91       	ld	r23, X
    2998:	6d 93       	st	X+, r22
    299a:	70 83       	st	Z, r23
    299c:	62 91       	ld	r22, -Z
    299e:	ae 17       	cp	r26, r30
    29a0:	bf 07       	cpc	r27, r31
    29a2:	c8 f3       	brcs	.-14     	; 0x2996 <strrev+0x10>
    29a4:	08 95       	ret

000029a6 <__udivmodhi4>:
    29a6:	aa 1b       	sub	r26, r26
    29a8:	bb 1b       	sub	r27, r27
    29aa:	51 e1       	ldi	r21, 0x11	; 17
    29ac:	07 c0       	rjmp	.+14     	; 0x29bc <__udivmodhi4_ep>

000029ae <__udivmodhi4_loop>:
    29ae:	aa 1f       	adc	r26, r26
    29b0:	bb 1f       	adc	r27, r27
    29b2:	a6 17       	cp	r26, r22
    29b4:	b7 07       	cpc	r27, r23
    29b6:	10 f0       	brcs	.+4      	; 0x29bc <__udivmodhi4_ep>
    29b8:	a6 1b       	sub	r26, r22
    29ba:	b7 0b       	sbc	r27, r23

000029bc <__udivmodhi4_ep>:
    29bc:	88 1f       	adc	r24, r24
    29be:	99 1f       	adc	r25, r25
    29c0:	5a 95       	dec	r21
    29c2:	a9 f7       	brne	.-22     	; 0x29ae <__udivmodhi4_loop>
    29c4:	80 95       	com	r24
    29c6:	90 95       	com	r25
    29c8:	bc 01       	movw	r22, r24
    29ca:	cd 01       	movw	r24, r26
    29cc:	08 95       	ret

000029ce <_exit>:
    29ce:	f8 94       	cli

000029d0 <__stop_program>:
    29d0:	ff cf       	rjmp	.-2      	; 0x29d0 <__stop_program>
